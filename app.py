import streamlit as st
import openai
from datetime import datetime
import pandas as pd
import os
from io import BytesIO
from fpdf import FPDF

# --- PAGE D'ACCUEIL & PHRASES D'ACCROCHE ---
st.markdown("""
<style>
.main-header {
    background: linear-gradient(90deg, #f5f7fa 0%, #c3cfe2 100%);
    border-radius: 12px;
    padding: 2rem 2rem 1rem 2rem;
    margin-bottom: 1.5rem;
    box-shadow: 0 4px 16px rgba(44, 62, 80, 0.08);
    text-align: center;
}
.logo-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 1.5rem;
}
</style>
<div class="logo-container">
    <img src="https://cdn.abacus.ai/images/d1788567-27c2-4731-b4f0-26dc07fcd4f3.png" alt="CUS Logo" width="320">
</div>
<div class="main-header">
    <h1 style="color:#1f4e79;">üèôÔ∏è UrbanAI Diagnostic</h1>
    <h3 style="color:#e67e22;">La plateforme intelligente pour le diagnostic urbain en Afrique</h3>
    <p style="font-size:1.1rem; color:#34495e;">
        <b>Description :</b> Diagnostic rapide, interactif et enrichi par l‚ÄôIA, bas√© sur vos r√©ponses et vos documents. G√©n√©rez un rapport complet, structur√© et personnalis√© pour votre ville.
    </p>
</div>
""", unsafe_allow_html=True)

tab1, tab2, tab3 = st.tabs(["üÜï Nouveau Diagnostic", "üìä Dashboard", "üí¨ Chatbot"])

# --- HISTORIQUE ---
HISTO_FILE = "historique_diagnostics.csv"
if not os.path.exists(HISTO_FILE):
    pd.DataFrame(columns=["date", "ville", "pays", "rapport"]).to_csv(HISTO_FILE, index=False)

def save_to_history(ville, pays, rapport):
    df = pd.read_csv(HISTO_FILE)
    new_row = {"date": datetime.now().strftime("%Y-%m-%d %H:%M"), "ville": ville, "pays": pays, "rapport": rapport}
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_csv(HISTO_FILE, index=False)

def markdown_to_pdf(text, filename="rapport.pdf"):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Arial", size=12)
    for line in text.split('\n'):
        pdf.multi_cell(0, 10, line)
    pdf_output = BytesIO()
    pdf.output(pdf_output)
    pdf_output.seek(0)
    return pdf_output

with tab1:
    st.markdown("""
    <div style="background:#eafaf1; border-radius:8px; padding:1rem; margin-bottom:1rem;">
        <b>üìù Remplissez chaque section, ajoutez vos documents, et obtenez un diagnostic urbain complet et personnalis√© !</b>
    </div>
    """, unsafe_allow_html=True)

    moteur_ia = st.selectbox("Choisissez le moteur IA", ["OpenAI", "Hugging Face"])
    longueur = st.radio("Longueur du rapport souhait√©e", ["Court (2 pages)", "Standard (4 pages)", "D√©taill√© (8 pages)"], index=2)
    recherche_web = st.checkbox("Inclure une recherche web sur la ville (si possible)")

    # --- Section 1 : Soci√©t√© ---
    st.header("Section 1 : Soci√©t√© üë•")
    col1, col2 = st.columns(2)
    with col1:
        scolarisation_primaire = st.text_input("1. Taux de scolarisation primaire (%)")
        scolarisation_secondaire = st.text_input("2. Taux de scolarisation secondaire (%)")
        alphabetisation = st.text_input("3. Taux d‚Äôalphab√©tisation adulte (%)")
        criminalite = st.text_input("4. Taux de criminalit√©")
    with col2:
        medecins = st.text_input("5. Nombre de m√©decins pour 10 000 habitants")
        esperance_vie = st.text_input("6. Esp√©rance de vie √† la naissance")

    # --- Section 2 : Habitat ---
    st.header("Section 2 : Habitat üè†")
    col3, col4 = st.columns(2)
    with col3:
        eau = st.text_input("7. Acc√®s √† l‚Äôeau potable (% population urbaine)")
        electricite = st.text_input("8. Acc√®s √† l‚Äô√©lectricit√© (% population urbaine)")
        surpeuplement = st.text_input("9. Qualit√© du logement (indice de surpeuplement)")
        informel = st.text_input("10. Part des logements informels (%)")
    with col4:
        cout_logement = st.text_input("11. Co√ªt moyen du logement (loyer moyen/m¬≤) en euros")
        accession = st.text_input("12. Taux d‚Äôaccession √† la propri√©t√© (%)")
        sanitaires = st.text_input("13. Acc√®s √† des sanitaires am√©lior√©s (% population)")
        satisfaction = st.text_input("14. Taux de satisfaction des habitants sur leur logement (%)")

    # --- Section 3 : Coordonn√©es de la Ville ---
    st.header("Section 3 : Coordonn√©es de la Ville üèôÔ∏èüì¨")
    ville = st.text_input("15. Nom de la Ville üåÜ")
    contact = st.text_input("16. Contact de la Ville üìûüíª")
    pays = st.text_input("17. Pays üåç")

    # --- Upload de documents ---
    st.header("Ajoutez vos documents (PDF, CSV, Excel)")
    uploaded_files = st.file_uploader(
        "Vous pouvez ajouter plusieurs fichiers (PDF, CSV, Excel). Leur contenu sera analys√© pour enrichir le diagnostic.",
        type=["pdf", "csv", "xlsx"],
        accept_multiple_files=True
    )

    # --- Afficher un r√©sum√© des donn√©es du CSV upload√© ---
    doc_texts = []
    if uploaded_files:
        st.subheader("üìë R√©sum√© des fichiers upload√©s")
        for file in uploaded_files:
            if file.type == "application/pdf":
                try:
                    import PyPDF2
                    reader = PyPDF2.PdfReader(file)
                    text = ""
                    for page in reader.pages:
                        text += page.extract_text() or ""
                    doc_texts.append(f"Contenu du PDF {file.name} :\n{text[:2000]}")
                    st.markdown(f"**{file.name} (PDF)** : {len(text)} caract√®res extraits")
                except Exception as e:
                    doc_texts.append(f"Erreur lecture PDF {file.name} : {e}")
                    st.warning(f"Erreur lecture PDF {file.name} : {e}")
            elif file.type == "text/csv":
                df = pd.read_csv(file)
                doc_texts.append(f"Contenu du CSV {file.name} :\n{df.head(10).to_string()}")
                st.markdown(f"**{file.name} (CSV)** :\n{df.head(5).to_markdown()}", unsafe_allow_html=True)
            elif file.type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                df = pd.read_excel(file)
                doc_texts.append(f"Contenu du Excel {file.name} :\n{df.head(10).to_string()}")
                st.markdown(f"**{file.name} (Excel)** :\n{df.head(5).to_markdown()}", unsafe_allow_html=True)

    # --- G√©n√©ration du diagnostic ---
    if st.button("üöÄ G√©n√©rer le diagnostic"):
        st.success(f"‚úÖ Diagnostic en cours de g√©n√©ration pour {ville} ({pays})...")

        # Construction du prompt enrichi
        prompt = f"""
Vous √™tes un expert en d√©veloppement urbain africain. G√©n√©rez un rapport urbain {longueur.lower()}, structur√©, avec des sous-titres clairs, des ic√¥nes, des couleurs, et des recommandations pr√©cises, bas√© sur les informations suivantes :

Section Soci√©t√© :
- Taux de scolarisation primaire : {scolarisation_primaire}
- Taux de scolarisation secondaire : {scolarisation_secondaire}
- Taux d‚Äôalphab√©tisation adulte : {alphabetisation}
- Taux de criminalit√© : {criminalite}
- Nombre de m√©decins pour 10 000 habitants : {medecins}
- Esp√©rance de vie √† la naissance : {esperance_vie}

Section Habitat :
- Acc√®s √† l‚Äôeau potable : {eau}
- Acc√®s √† l‚Äô√©lectricit√© : {electricite}
- Qualit√© du logement (surpeuplement) : {surpeuplement}
- Part des logements informels : {informel}
- Co√ªt moyen du logement : {cout_logement}
- Taux d‚Äôaccession √† la propri√©t√© : {accession}
- Acc√®s √† des sanitaires am√©lior√©s : {sanitaires}
- Taux de satisfaction des habitants : {satisfaction}

Coordonn√©es :
- Ville : {ville}
- Contact : {contact}
- Pays : {pays}

Documents fournis :
{chr(10).join(doc_texts) if doc_texts else "Aucun document fourni."}

Structure du rapport attendue :
1. R√©sum√© ex√©cutif (long, synth√©tique, avec chiffres cl√©s)
2. Contexte d√©mographique et social (avec analyse fine)
3. Analyse d√©taill√©e des d√©fis et opportunit√©s (sous-sections par th√®me)
4. Recommandations strat√©giques (claires, actionnables, adapt√©es √† la ville)
5. Conclusion prospective (sc√©narios, axes d‚Äôam√©lioration)
6. R√©f√©rences et sources (si possible)

Contraintes :
- Limite la longueur √† 8 pages maximum (environ 4000-5000 mots)
- Mets les sous-titres en gras et ajoute des ic√¥nes pour chaque section
- Utilise toutes les informations et documents fournis
- { "Inclure une recherche web sur la ville et le pays pour enrichir le rapport avec des donn√©es r√©centes." if recherche_web else "" }
- R√©dige chaque section de fa√ßon d√©taill√©e et professionnelle.
        """

        rapport = ""
        if moteur_ia == "OpenAI":
            openai.api_key = st.secrets["OPENAI_API_KEY"]
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": prompt}],
                    max_tokens=4000,
                    temperature=0.7,
                )
                rapport = response.choices[0].message.content
            except Exception as e:
                rapport = f"Erreur lors de la g√©n√©ration du rapport : {e}"

        elif moteur_ia == "Hugging Face":
            # Simulation Hugging Face (remplace par ton vrai appel API si tu veux)
            rapport = f"""
## üìã R√©sum√© Ex√©cutif
La ville de {ville}, {pays}, pr√©sente un profil urbain dynamique...

## üë• Contexte D√©mographique et Social
...

## ‚ö†Ô∏è Analyse d√©taill√©e des d√©fis et opportunit√©s
...

## üéØ Recommandations Strat√©giques
...

## üìä Conclusion Prospective
...

*Diagnostic g√©n√©r√© par UrbanAI - {datetime.now().strftime("%d/%m/%Y √† %H:%M")}*
            """

        # --- Affichage du rapport stylis√© ---
        st.markdown("### ü§ñ Rapport IA")
        st.markdown(f"""
        <div class="diagnostic-card" style="background:white; padding:1.5rem; border-radius:10px; box-shadow:0 2px 4px rgba(0,0,0,0.1); margin:1rem 0;">
            {rapport}
        </div>
        """, unsafe_allow_html=True)

        # --- Sauvegarde dans l'historique ---
        save_to_history(ville, pays, rapport)

        # --- T√©l√©chargement PDF ---
        pdf_file = markdown_to_pdf(rapport)
        st.download_button(
            label="üì• T√©l√©charger le rapport en PDF",
            data=pdf_file,
            file_name=f"Diagnostic_{ville}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
            mime="application/pdf"
        )

# --- ONGLET 2 : DASHBOARD ---
with tab2:
    st.markdown("""
    <div style="background:#f9fbe7; border-radius:8px; padding:1rem; margin-bottom:1rem;">
        <b>üìä Visualisez et comparez tous vos diagnostics urbains.</b><br>
        Suivez l‚Äô√©volution de vos villes et identifiez les leviers d‚Äôaction.
    </div>
    """, unsafe_allow_html=True)
    # Affichage de l'historique
    df_hist = pd.read_csv(HISTO_FILE)
    if not df_hist.empty:
        st.dataframe(df_hist[["date", "ville", "pays"]].sort_values("date", ascending=False))
        selected = st.selectbox("Voir un rapport g√©n√©r√© :", df_hist["date"].sort_values(ascending=False))
        rapport_sel = df_hist[df_hist["date"] == selected]["rapport"].values[0]
        st.markdown("### Rapport s√©lectionn√©")
        st.markdown(rapport_sel)
        st.download_button(
            label="üì• T√©l√©charger ce rapport en PDF",
            data=markdown_to_pdf(rapport_sel),
            file_name=f"Diagnostic_{selected.replace(' ','_').replace(':','')}.pdf",
            mime="application/pdf"
        )
    else:
        st.info("Aucun diagnostic g√©n√©r√© pour l‚Äôinstant.")

# --- ONGLET 3 : CHATBOT ---
with tab3:
    st.markdown("""
    <div style="background:#e3f2fd; border-radius:8px; padding:1rem; margin-bottom:1rem;">
        <b>üí¨ Posez vos questions √† notre assistant IA !</b><br>
        Obtenez des conseils, des explications et de l‚Äôaide sur l‚Äôurbanisme.
    </div>
    """, unsafe_allow_html=True)
    question = st.text_input("Posez votre question √† l‚ÄôIA")
    if st.button("Envoyer"):
        if question.strip():
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": question}],
                    max_tokens=300,
                    temperature=0.7,
                )
                reponse_ia = response.choices[0].message.content
            except Exception as e:
                reponse_ia = f"Erreur lors de la r√©ponse IA : {e}"
            st.markdown(f"**R√©ponse IA :** {reponse_ia}")
        else:
            st.info("Veuillez saisir une question.")
