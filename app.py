import streamlit as st
import pandas as pd
import sqlite3
import requests
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import base64

# Configuration de la page
st.set_page_config(
    page_title="Diagnostic Urbain - Nouakchott",
    page_icon="üèôÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .dimension-header {
        color: #2c3e50;
        border-bottom: 2px solid #3498db;
        padding-bottom: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# Initialisation de la base de donn√©es
def init_database():
    conn = sqlite3.connect('urban_diagnostic.db', check_same_thread=False)
    cursor = conn.cursor()

    # Table des indicateurs
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS indicators (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            code TEXT UNIQUE,
            name TEXT,
            dimension TEXT,
            value REAL,
            unit TEXT,
            source TEXT,
            date_collected TEXT,
            reference TEXT
        )
    """)

    # Table des villes
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS cities (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            country TEXT,
            population INTEGER,
            area REAL
        )
    """)

    conn.commit()
    return conn

# Catalogue des indicateurs
INDICATORS_CATALOG = {
    "Soci√©t√©": {
        "SOC001": {"name": "Taux d'alphab√©tisation des adultes", "unit": "%", "wb_code": "SE.ADT.LITR.ZS"},
        "SOC002": {"name": "Taux de scolarisation primaire", "unit": "%", "wb_code": "SE.PRM.NENR"},
        "SOC003": {"name": "Ratio √©l√®ves/enseignant (primaire)", "unit": "ratio", "wb_code": "SE.PRM.ENRL.TC.ZS"},
        "SOC004": {"name": "Esp√©rance de vie √† la naissance", "unit": "ann√©es", "wb_code": "SP.DYN.LE00.IN"},
        "SOC005": {"name": "Taux de mortalit√© infantile", "unit": "‚Ä∞", "wb_code": "SP.DYN.IMRT.IN"},
        "SOC006": {"name": "Taux de mortalit√© maternelle", "unit": "/100k", "wb_code": "SH.STA.MMRT"},
        "SOC007": {"name": "Pr√©valence de la malnutrition", "unit": "%", "wb_code": "SN.ITK.DEFC.ZS"},
        "SOC008": {"name": "Acc√®s aux services de sant√©", "unit": "%", "wb_code": "SH.MED.BEDS.ZS"},
        "SOC009": {"name": "Taux de ch√¥mage", "unit": "%", "wb_code": "SL.UEM.TOTL.ZS"},
        "SOC010": {"name": "Indice de Gini", "unit": "index", "wb_code": "SI.POV.GINI"}
    },
    "Habitat": {
        "HAB001": {"name": "Pourcentage de logements pr√©caires", "unit": "%", "wb_code": "EN.POP.SLUM.UR.ZS"},
        "HAB002": {"name": "Densit√© de logement", "unit": "log/km¬≤", "wb_code": None},
        "HAB003": {"name": "Taille moyenne des m√©nages", "unit": "personnes", "wb_code": None},
        "HAB004": {"name": "Acc√®s √† l'eau potable", "unit": "%", "wb_code": "SH.H2O.BASW.ZS"},
        "HAB005": {"name": "Acc√®s √† l'assainissement", "unit": "%", "wb_code": "SH.STA.BASS.ZS"},
        "HAB006": {"name": "Acc√®s √† l'√©lectricit√©", "unit": "%", "wb_code": "EG.ELC.ACCS.ZS"},
        "HAB007": {"name": "Prix moyen du logement", "unit": "$/m¬≤", "wb_code": None},
        "HAB008": {"name": "Taux de propri√©taires", "unit": "%", "wb_code": None}
    },
    "D√©veloppement Spatial": {
        "DEV001": {"name": "Superficie urbaine", "unit": "km¬≤", "wb_code": None},
        "DEV002": {"name": "Densit√© de population urbaine", "unit": "hab/km¬≤", "wb_code": "EN.POP.DNST"},
        "DEV003": {"name": "Taux d'urbanisation", "unit": "%", "wb_code": "SP.URB.TOTL.IN.ZS"},
        "DEV004": {"name": "Espaces verts par habitant", "unit": "m¬≤/hab", "wb_code": None},
        "DEV005": {"name": "Coefficient d'occupation du sol", "unit": "ratio", "wb_code": None},
        "DEV006": {"name": "Longueur du r√©seau routier", "unit": "km", "wb_code": None},
        "DEV007": {"name": "Densit√© du r√©seau routier", "unit": "km/km¬≤", "wb_code": None}
    },
    "Infrastructure": {
        "INF001": {"name": "Longueur des routes pav√©es", "unit": "km", "wb_code": "IS.ROD.PAVE.ZS"},
        "INF002": {"name": "Acc√®s aux transports publics", "unit": "%", "wb_code": None},
        "INF003": {"name": "Nombre d'h√¥pitaux", "unit": "unit√©s", "wb_code": None},
        "INF004": {"name": "Nombre d'√©coles", "unit": "unit√©s", "wb_code": None},
        "INF005": {"name": "Couverture r√©seau mobile", "unit": "%", "wb_code": "IT.CEL.SETS.P2"},
        "INF006": {"name": "Acc√®s √† Internet", "unit": "%", "wb_code": "IT.NET.USER.ZS"},
        "INF007": {"name": "Capacit√© de traitement des d√©chets", "unit": "tonnes/jour", "wb_code": None},
        "INF008": {"name": "Longueur du r√©seau d'√©gouts", "unit": "km", "wb_code": None}
    },
    "Environnement/√âcologie": {
        "ENV001": {"name": "Qualit√© de l'air (PM2.5)", "unit": "Œºg/m¬≥", "wb_code": "EN.ATM.PM25.MC.M3"},
        "ENV002": {"name": "√âmissions de CO2", "unit": "tonnes/hab", "wb_code": "EN.ATM.CO2E.PC"},
        "ENV003": {"name": "Consommation d'eau", "unit": "L/hab/jour", "wb_code": None},
        "ENV004": {"name": "Production de d√©chets", "unit": "kg/hab/jour", "wb_code": None},
        "ENV005": {"name": "Taux de recyclage", "unit": "%", "wb_code": None},
        "ENV006": {"name": "Couverture foresti√®re urbaine", "unit": "%", "wb_code": "AG.LND.FRST.ZS"},
        "ENV007": {"name": "Zones prot√©g√©es", "unit": "%", "wb_code": "ER.PTD.TOTL.ZS"},
        "ENV008": {"name": "Risque d'inondation", "unit": "niveau", "wb_code": None}
    },
    "Gouvernance": {
        "GOV001": {"name": "Indice de transparence", "unit": "score", "wb_code": None},
        "GOV002": {"name": "Participation √©lectorale", "unit": "%", "wb_code": None},
        "GOV003": {"name": "Efficacit√© gouvernementale", "unit": "score", "wb_code": "CC.GE.EST"},
        "GOV004": {"name": "√âtat de droit", "unit": "score", "wb_code": "CC.RL.EST"},
        "GOV005": {"name": "Contr√¥le de la corruption", "unit": "score", "wb_code": "CC.CC.EST"},
        "GOV006": {"name": "Budget municipal par habitant", "unit": "$/hab", "wb_code": None},
        "GOV007": {"name": "Nombre d'ONG actives", "unit": "unit√©s", "wb_code": None}
    },
    "√âconomie": {
        "ECO001": {"name": "PIB par habitant", "unit": "$", "wb_code": "NY.GDP.PCAP.CD"},
        "ECO002": {"name": "Taux de croissance √©conomique", "unit": "%", "wb_code": "NY.GDP.MKTP.KD.ZG"},
        "ECO003": {"name": "Taux d'inflation", "unit": "%", "wb_code": "FP.CPI.TOTL.ZG"},
        "ECO004": {"name": "Nombre d'entreprises", "unit": "unit√©s", "wb_code": None},
        "ECO005": {"name": "Investissement √©tranger direct", "unit": "$ millions", "wb_code": "BX.KLT.DINV.CD.WD"},
        "ECO006": {"name": "Recettes fiscales", "unit": "% PIB", "wb_code": "GC.TAX.TOTL.GD.ZS"},
        "ECO007": {"name": "D√©penses publiques", "unit": "% PIB", "wb_code": "GC.XPN.TOTL.GD.ZS"},
        "ECO008": {"name": "Balance commerciale", "unit": "$ millions", "wb_code": "NE.RSB.GNFS.CD"}
    }
}

def collect_worldbank_data(country_code="MRT", year=2022):
    """Collecte des donn√©es depuis l'API de la Banque Mondiale"""
    collected_data = {}

    for dimension, indicators in INDICATORS_CATALOG.items():
        for code, info in indicators.items():
            if info.get("wb_code"):
                try:
                    url = f"https://api.worldbank.org/v2/country/{country_code}/indicator/{info['wb_code']}"
                    params = {
                        "format": "json",
                        "date": f"{year-2}:{year}",
                        "per_page": 10
                    }

                    response = requests.get(url, params=params, timeout=10)

                    if response.status_code == 200:
                        data = response.json()
                        if len(data) > 1 and data[1]:
                            # Prendre la valeur la plus r√©cente disponible
                            for entry in data[1]:
                                if entry["value"] is not None:
                                    collected_data[code] = {
                                        "name": info["name"],
                                        "value": entry["value"],
                                        "unit": info["unit"],
                                        "dimension": dimension,
                                        "source": "World Bank",
                                        "date": entry["date"],
                                        "reference": f"World Bank - {info['wb_code']}"
                                    }
                                    break
                            else:
                                collected_data[code] = {
                                    "name": info["name"],
                                    "value": None,
                                    "unit": info["unit"],
                                    "dimension": dimension,
                                    "source": "World Bank",
                                    "date": str(year),
                                    "reference": f"World Bank - {info['wb_code']} (No data)"
                                }
                        else:
                            collected_data[code] = {
                                "name": info["name"],
                                "value": None,
                                "unit": info["unit"],
                                "dimension": dimension,
                                "source": "World Bank",
                                "date": str(year),
                                "reference": f"World Bank - {info['wb_code']} (No data)"
                            }
                    else:
                        collected_data[code] = {
                            "name": info["name"],
                            "value": None,
                            "unit": info["unit"],
                            "dimension": dimension,
                            "source": "World Bank",
                            "date": str(year),
                            "reference": f"World Bank - {info['wb_code']} (API Error)"
                        }

                except Exception as e:
                    collected_data[code] = {
                        "name": info["name"],
                        "value": None,
                        "unit": info["unit"],
                        "dimension": dimension,
                        "source": "World Bank",
                        "date": str(year),
                        "reference": f"World Bank - {info['wb_code']} (Error: {str(e)})"
                    }
            else:
                collected_data[code] = {
                    "name": info["name"],
                    "value": None,
                    "unit": info["unit"],
                    "dimension": dimension,
                    "source": "Manual Input Required",
                    "date": str(year),
                    "reference": "No automated source available"
                }

    return collected_data

def save_indicators_to_db(conn, indicators_data):
    """Sauvegarde les indicateurs dans la base de donn√©es"""
    cursor = conn.cursor()

    for code, data in indicators_data.items():
        cursor.execute("""
            INSERT OR REPLACE INTO indicators 
            (code, name, dimension, value, unit, source, date_collected, reference)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            code, data["name"], data["dimension"], data["value"],
            data["unit"], data["source"], data["date"], data["reference"]
        ))

    conn.commit()

def load_indicators_from_db(conn):
    """Charge les indicateurs depuis la base de donn√©es"""
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM indicators')
    rows = cursor.fetchall()

    indicators = {}
    for row in rows:
        indicators[row[1]] = {  # row[1] is code
            "name": row[2],
            "dimension": row[3],
            "value": row[4],
            "unit": row[5],
            "source": row[6],
            "date": row[7],
            "reference": row[8]
        }

    return indicators

def calculate_dimension_score(dimension_data):
    """Calcule le score d'une dimension bas√© sur ses indicateurs"""
    valid_values = [v["value"] for v in dimension_data.values() if v["value"] is not None]

    if not valid_values:
        return 0

    # Score simple bas√© sur la moyenne normalis√©e (√† adapter selon les indicateurs)
    normalized_score = min(100, max(0, sum(valid_values) / len(valid_values)))
    return round(normalized_score, 2)

def auto_collector_tab():
    """Interface pour la collecte automatique de donn√©es"""
    st.header("üîÑ Collecteur Automatique de Donn√©es")

    col1, col2 = st.columns([2, 1])

    with col1:
        st.subheader("Configuration de la collecte")

        country_code = st.selectbox(
            "Code pays (ISO 3)",
            ["MRT", "SEN", "MLI", "NER", "BFA", "CIV"],
            index=0,
            help="Code ISO 3 lettres du pays"
        )

        year = st.number_input(
            "Ann√©e de r√©f√©rence",
            min_value=2000,
            max_value=2024,
            value=2022,
            help="Ann√©e pour laquelle collecter les donn√©es"
        )

    with col2:
        st.subheader("Actions")

        if st.button("üöÄ Lancer la collecte", type="primary"):
            with st.spinner("Collecte des donn√©es en cours..."):
                try:
                    # Collecte des donn√©es
                    indicators_data = collect_worldbank_data(country_code, year)

                    # Sauvegarde en base
                    conn = st.session_state.db_conn
                    save_indicators_to_db(conn, indicators_data)

                    # Mise √† jour du session state
                    st.session_state.indicators_data = indicators_data

                    st.success(f"‚úÖ Collecte termin√©e ! {len(indicators_data)} indicateurs trait√©s.")

                    # Statistiques de collecte
                    collected_count = sum(1 for v in indicators_data.values() if v["value"] is not None)
                    missing_count = len(indicators_data) - collected_count

                    col_stat1, col_stat2, col_stat3 = st.columns(3)
                    with col_stat1:
                        st.metric("Total indicateurs", len(indicators_data))
                    with col_stat2:
                        st.metric("Donn√©es collect√©es", collected_count)
                    with col_stat3:
                        st.metric("Donn√©es manquantes", missing_count)

                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la collecte : {str(e)}")

    # Affichage des donn√©es collect√©es
    if hasattr(st.session_state, 'indicators_data'):
        st.subheader("üìä Donn√©es collect√©es")

        # Filtre par dimension
        dimensions = list(set(v["dimension"] for v in st.session_state.indicators_data.values()))
        selected_dimension = st.selectbox("Filtrer par dimension", ["Toutes"] + dimensions)

        # Pr√©paration des donn√©es pour l'affichage
        display_data = []
        for code, data in st.session_state.indicators_data.items():
            if selected_dimension == "Toutes" or data["dimension"] == selected_dimension:
                display_data.append({
                    "Code": code,
                    "Indicateur": data["name"],
                    "Dimension": data["dimension"],
                    "Valeur": data["value"] if data["value"] is not None else "N/A",
                    "Unit√©": data["unit"],
                    "Source": data["source"],
                    "Date": data["date"]
                })

        if display_data:
            df = pd.DataFrame(display_data)
            st.dataframe(df, use_container_width=True)

            # Option de t√©l√©chargement
            csv = df.to_csv(index=False)
            st.download_button(
                label="üì• T√©l√©charger les donn√©es (CSV)",
                data=csv,
                file_name=f"indicators_{country_code}_{year}.csv",
                mime="text/csv"
            )

def diagnostic_tab():
    """Interface pour le diagnostic urbain"""
    st.header("üìã Diagnostic Urbain")

    # Chargement des donn√©es existantes
    if not hasattr(st.session_state, 'indicators_data'):
        conn = st.session_state.db_conn
        st.session_state.indicators_data = load_indicators_from_db(conn)

    if not st.session_state.indicators_data:
        st.warning("‚ö†Ô∏è Aucune donn√©e disponible. Veuillez d'abord utiliser le collecteur automatique.")
        return

    # Organisation par dimensions
    dimensions = {}
    for code, data in st.session_state.indicators_data.items():
        dim = data["dimension"]
        if dim not in dimensions:
            dimensions[dim] = {}
        dimensions[dim][code] = data

    # Interface de saisie par dimension
    st.subheader("üìù Saisie et validation des donn√©es")

    updated_data = {}

    for dimension, indicators in dimensions.items():
        with st.expander(f"üìä {dimension}", expanded=False):
            st.markdown(f"<h4 class='dimension-header'>{dimension}</h4>", unsafe_allow_html=True)

            cols = st.columns(2)
            for i, (code, data) in enumerate(indicators.items()):
                with cols[i % 2]:
                    current_value = data["value"] if data["value"] is not None else 0.0

                    new_value = st.number_input(
                        f"{data['name']} ({data['unit']})",
                        value=float(current_value),
                        key=f"input_{code}",
                        help=f"Source: {data['source']} | R√©f√©rence: {data['reference']}"
                    )

                    updated_data[code] = {
                        **data,
                        "value": new_value
                    }

    # Bouton de sauvegarde
    if st.button("üíæ Sauvegarder les modifications", type="primary"):
        conn = st.session_state.db_conn
        save_indicators_to_db(conn, updated_data)
        st.session_state.indicators_data = updated_data
        st.success("‚úÖ Donn√©es sauvegard√©es avec succ√®s !")

    # Calcul et affichage des scores par dimension
    st.subheader("üìà Scores par dimension")

    dimension_scores = {}
    cols = st.columns(len(dimensions))

    for i, (dimension, indicators) in enumerate(dimensions.items()):
        score = calculate_dimension_score(indicators)
        dimension_scores[dimension] = score

        with cols[i]:
            st.metric(
                label=dimension,
                value=f"{score}/100",
                delta=None
            )

def dashboard_tab():
    """Interface du tableau de bord"""
    st.header("üìä Tableau de Bord")

    if not hasattr(st.session_state, 'indicators_data') or not st.session_state.indicators_data:
        st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour le tableau de bord.")
        return

    # Organisation des donn√©es par dimension
    dimensions = {}
    for code, data in st.session_state.indicators_data.items():
        dim = data["dimension"]
        if dim not in dimensions:
            dimensions[dim] = {}
        dimensions[dim][code] = data

    # M√©triques principales
    st.subheader("üéØ Indicateurs Cl√©s")

    key_metrics = {
        "Population urbaine": st.session_state.indicators_data.get("DEV003", {}).get("value", "N/A"),
        "Acc√®s √† l'eau potable": st.session_state.indicators_data.get("HAB004", {}).get("value", "N/A"),
        "PIB par habitant": st.session_state.indicators_data.get("ECO001", {}).get("value", "N/A"),
        "Esp√©rance de vie": st.session_state.indicators_data.get("SOC004", {}).get("value", "N/A")
    }

    cols = st.columns(4)
    for i, (metric, value) in enumerate(key_metrics.items()):
        with cols[i]:
            if value != "N/A" and value is not None:
                st.metric(metric, f"{value:.1f}")
            else:
                st.metric(metric, "N/A")

    # Graphiques par dimension
    st.subheader("üìà Visualisations par Dimension")

    # Scores par dimension
    dimension_scores = {}
    for dimension, indicators in dimensions.items():
        valid_values = [v["value"] for v in indicators.values() if v["value"] is not None]
        if valid_values:
            # Score normalis√© simple (√† adapter selon la logique m√©tier)
            score = min(100, max(0, sum(valid_values) / len(valid_values)))
            dimension_scores[dimension] = score
        else:
            dimension_scores[dimension] = 0

    # Graphique radar des scores
    if dimension_scores:
        fig_radar = go.Figure()

        fig_radar.add_trace(go.Scatterpolar(
            r=list(dimension_scores.values()),
            theta=list(dimension_scores.keys()),
            fill='toself',
            name='Scores'
        ))

        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True,
            title="Scores par Dimension"
        )

        st.plotly_chart(fig_radar, use_container_width=True)

    # Graphiques d√©taill√©s par dimension
    selected_dim = st.selectbox("S√©lectionner une dimension pour le d√©tail", list(dimensions.keys()))

    if selected_dim and selected_dim in dimensions:
        dim_data = dimensions[selected_dim]

        # Pr√©paration des donn√©es pour le graphique
        indicators_names = []
        indicators_values = []

        for code, data in dim_data.items():
            if data["value"] is not None:
                indicators_names.append(data["name"][:30] + "..." if len(data["name"]) > 30 else data["name"])
                indicators_values.append(data["value"])

        if indicators_names and indicators_values:
            fig_bar = px.bar(
                x=indicators_values,
                y=indicators_names,
                orientation='h',
                title=f"Indicateurs - {selected_dim}",
                labels={'x': 'Valeur', 'y': 'Indicateurs'}
            )
            fig_bar.update_layout(height=400)
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.info("Aucune donn√©e disponible pour cette dimension.")

def generate_pdf_report():
    """G√©n√®re un rapport PDF"""
    if not hasattr(st.session_state, 'indicators_data') or not st.session_state.indicators_data:
        return None

    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    # Titre
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1  # Center
    )
    story.append(Paragraph("DIAGNOSTIC URBAIN - NOUAKCHOTT", title_style))
    story.append(Spacer(1, 20))

    # Date
    story.append(Paragraph(f"Date du rapport: {datetime.now().strftime('%d/%m/%Y')}", styles['Normal']))
    story.append(Spacer(1, 20))

    # R√©sum√© ex√©cutif
    story.append(Paragraph("R√âSUM√â EX√âCUTIF", styles['Heading2']))
    story.append(Paragraph(
        "Ce rapport pr√©sente un diagnostic urbain complet de Nouakchott bas√© sur "
        "65 indicateurs r√©partis en 7 dimensions cl√©s : Soci√©t√©, Habitat, "
        "D√©veloppement Spatial, Infrastructure, Environnement/√âcologie, "
        "Gouvernance et √âconomie.",
        styles['Normal']
    ))
    story.append(Spacer(1, 20))

    # Organisation des donn√©es par dimension
    dimensions = {}
    for code, data in st.session_state.indicators_data.items():
        dim = data["dimension"]
        if dim not in dimensions:
            dimensions[dim] = {}
        dimensions[dim][code] = data

    # Analyse par dimension
    for dimension, indicators in dimensions.items():
        story.append(Paragraph(f"{dimension.upper()}", styles['Heading2']))

        # Tableau des indicateurs
        table_data = [["Indicateur", "Valeur", "Unit√©", "Source"]]

        for code, data in indicators.items():
            value_str = str(data["value"]) if data["value"] is not None else "N/A"
            table_data.append([
                data["name"][:40] + "..." if len(data["name"]) > 40 else data["name"],
                value_str,
                data["unit"],
                data["source"][:20] + "..." if len(data["source"]) > 20 else data["source"]
            ])

        table = Table(table_data, colWidths=[3*inch, 1*inch, 1*inch, 1.5*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))

        story.append(table)
        story.append(Spacer(1, 20))

        if dimension != list(dimensions.keys())[-1]:  # Pas de saut de page pour la derni√®re dimension
            story.append(PageBreak())

    # Conclusion
    story.append(Paragraph("CONCLUSION ET RECOMMANDATIONS", styles['Heading2']))
    story.append(Paragraph(
        "Ce diagnostic urbain r√©v√®le les d√©fis et opportunit√©s de d√©veloppement "
        "de Nouakchott. Les donn√©es collect√©es permettent d'identifier les "
        "priorit√©s d'intervention et de formuler des strat√©gies de d√©veloppement "
        "urbain durable.",
        styles['Normal']
    ))

    doc.build(story)
    buffer.seek(0)
    return buffer

def reports_tab():
    """Interface pour la g√©n√©ration de rapports"""
    st.header("üìÑ G√©n√©ration de Rapports")

    if not hasattr(st.session_state, 'indicators_data') or not st.session_state.indicators_data:
        st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour g√©n√©rer un rapport.")
        return

    st.subheader("üìã Configuration du rapport")

    col1, col2 = st.columns([2, 1])

    with col1:
        report_title = st.text_input("Titre du rapport", "Diagnostic Urbain - Nouakchott")
        report_author = st.text_input("Auteur", "√âquipe de Diagnostic Urbain")

        include_sections = st.multiselect(
            "Sections √† inclure",
            ["R√©sum√© ex√©cutif", "Analyse par dimension", "Graphiques", "Recommandations"],
            default=["R√©sum√© ex√©cutif", "Analyse par dimension", "Recommandations"]
        )

    with col2:
        st.subheader("Actions")

        if st.button("üìä Aper√ßu des donn√©es", type="secondary"):
            # Statistiques rapides
            total_indicators = len(st.session_state.indicators_data)
            collected_indicators = sum(1 for v in st.session_state.indicators_data.values() if v["value"] is not None)

            st.info(f"üìà {collected_indicators}/{total_indicators} indicateurs avec donn√©es")

        if st.button("üîÑ G√©n√©rer le rapport PDF", type="primary"):
            with st.spinner("G√©n√©ration du rapport en cours..."):
                try:
                    pdf_buffer = generate_pdf_report()

                    if pdf_buffer:
                        st.success("‚úÖ Rapport g√©n√©r√© avec succ√®s !")

                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="üì• T√©l√©charger le rapport PDF",
                            data=pdf_buffer.getvalue(),
                            file_name=f"diagnostic_urbain_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                            mime="application/pdf"
                        )
                    else:
                        st.error("‚ùå Erreur lors de la g√©n√©ration du rapport.")

                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")

    # Pr√©visualisation des donn√©es
    st.subheader("üëÅÔ∏è Pr√©visualisation des donn√©es")

    # Organisation par dimension pour l'affichage
    dimensions = {}
    for code, data in st.session_state.indicators_data.items():
        dim = data["dimension"]
        if dim not in dimensions:
            dimensions[dim] = {}
        dimensions[dim][code] = data

    # Affichage par dimension
    for dimension, indicators in dimensions.items():
        with st.expander(f"üìä {dimension}"):
            data_for_table = []
            for code, data in indicators.items():
                data_for_table.append({
                    "Code": code,
                    "Indicateur": data["name"],
                    "Valeur": data["value"] if data["value"] is not None else "N/A",
                    "Unit√©": data["unit"],
                    "Source": data["source"]
                })

            if data_for_table:
                df = pd.DataFrame(data_for_table)
                st.dataframe(df, use_container_width=True)

def chatbot_tab():
    """Interface du chatbot"""
    st.header("ü§ñ Assistant Diagnostic")

    st.info("üí° Posez vos questions sur les donn√©es urbaines de Nouakchott")

    # Historique des conversations
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []

    # Zone de saisie
    user_question = st.text_input("Votre question:", placeholder="Ex: Quel est le taux d'acc√®s √† l'eau potable ?")

    if st.button("Envoyer") and user_question:
        # Simulation de r√©ponse du chatbot
        if not hasattr(st.session_state, 'indicators_data'):
            response = "Je n'ai pas encore acc√®s aux donn√©es. Veuillez d'abord utiliser le collecteur automatique."
        else:
            # Logique simple de r√©ponse bas√©e sur les mots-cl√©s
            response = generate_chatbot_response(user_question, st.session_state.indicators_data)

        # Ajout √† l'historique
        st.session_state.chat_history.append({"user": user_question, "bot": response})

    # Affichage de l'historique
    if st.session_state.chat_history:
        st.subheader("üí¨ Conversation")

        for i, exchange in enumerate(reversed(st.session_state.chat_history[-5:])):  # 5 derniers √©changes
            with st.container():
                st.markdown(f"**üë§ Vous:** {exchange['user']}")
                st.markdown(f"**ü§ñ Assistant:** {exchange['bot']}")
                st.markdown("---")

def generate_chatbot_response(question, indicators_data):
    """G√©n√®re une r√©ponse simple du chatbot"""
    question_lower = question.lower()

    # Mots-cl√©s pour diff√©rents indicateurs
    keywords_mapping = {
        "eau": ["HAB004"],
        "√©lectricit√©": ["HAB006"],
        "assainissement": ["HAB005"],
        "population": ["DEV002", "DEV003"],
        "pib": ["ECO001"],
        "√©conomie": ["ECO001", "ECO002"],
        "sant√©": ["SOC004", "SOC005"],
        "√©ducation": ["SOC001", "SOC002"],
        "environnement": ["ENV001", "ENV002"],
        "transport": ["INF001", "INF002"]
    }

    # Recherche de mots-cl√©s
    relevant_indicators = []
    for keyword, codes in keywords_mapping.items():
        if keyword in question_lower:
            for code in codes:
                if code in indicators_data:
                    relevant_indicators.append((code, indicators_data[code]))

    if relevant_indicators:
        response = "Voici les informations que j'ai trouv√©es :\n\n"
        for code, data in relevant_indicators:
            value_str = f"{data['value']:.2f} {data['unit']}" if data['value'] is not None else "Donn√©e non disponible"
            response += f"‚Ä¢ **{data['name']}**: {value_str}\n"
            response += f"  Source: {data['source']} ({data['date']})\n\n"
    else:
        response = ("Je n'ai pas trouv√© d'informations sp√©cifiques pour votre question. "
                   "Vous pouvez consulter le tableau de bord pour voir toutes les donn√©es disponibles, "
                   "ou reformuler votre question avec des termes comme 'eau', '√©lectricit√©', "
                   "'population', 'PIB', 'sant√©', '√©ducation', etc.")

    return response

def main():
    """Fonction principale de l'application"""

    # Initialisation de la base de donn√©es
    if 'db_conn' not in st.session_state:
        st.session_state.db_conn = init_database()

    # Titre principal
    st.markdown("<h1 class='main-header'>üèôÔ∏è Diagnostic Urbain - Nouakchott</h1>", unsafe_allow_html=True)

    # Sidebar avec informations
    with st.sidebar:
        st.image("https://via.placeholder.com/200x100/1f77b4/white?text=NOUAKCHOTT", caption="Ville de Nouakchott")

        st.markdown("### üìä Informations du projet")
        st.markdown("""
        - **65 indicateurs** r√©partis en 7 dimensions
        - **Collecte automatis√©e** depuis la Banque Mondiale
        - **Interface intuitive** pour la saisie manuelle
        - **Rapports PDF** personnalisables
        - **Tableau de bord** interactif
        """)

        st.markdown("### üéØ Dimensions analys√©es")
        dimensions_list = [
            "üèõÔ∏è Soci√©t√©", "üè† Habitat", "üåÜ D√©veloppement Spatial",
            "üöß Infrastructure", "üå± Environnement", "‚öñÔ∏è Gouvernance", "üí∞ √âconomie"
        ]
        for dim in dimensions_list:
            st.markdown(f"- {dim}")

    # Navigation par onglets
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üîÑ Auto-Collecteur", "üìã Diagnostic", "üìä Tableau de Bord", 
        "üìÑ Rapports", "ü§ñ Assistant", "‚ÑπÔ∏è √Ä propos"
    ])

    with tab1:
        auto_collector_tab()

    with tab2:
        diagnostic_tab()

    with tab3:
        dashboard_tab()

    with tab4:
        reports_tab()

    with tab5:
        chatbot_tab()

    with tab6:
        st.header("‚ÑπÔ∏è √Ä propos du projet")

        st.markdown("""
        ### üéØ Objectif
        Cette application permet de r√©aliser un diagnostic urbain complet de Nouakchott 
        en collectant et analysant 65 indicateurs cl√©s r√©partis en 7 dimensions.

        ### üîß Fonctionnalit√©s
        - **Collecte automatique** de donn√©es depuis l'API de la Banque Mondiale
        - **Interface de saisie** pour les donn√©es locales
        - **Calcul automatique** des scores par dimension
        - **Visualisations interactives** avec Plotly
        - **G√©n√©ration de rapports PDF** personnalisables
        - **Assistant conversationnel** pour l'aide √† la d√©cision

        ### üìà Dimensions analys√©es
        1. **Soci√©t√©** - √âducation, sant√©, d√©mographie
        2. **Habitat** - Logement, services de base
        3. **D√©veloppement Spatial** - Urbanisation, densit√©
        4. **Infrastructure** - Transport, t√©l√©communications
        5. **Environnement** - Qualit√© de l'air, gestion des d√©chets
        6. **Gouvernance** - Transparence, participation
        7. **√âconomie** - PIB, emploi, investissements

        ### üë• √âquipe de d√©veloppement
        D√©velopp√© pour le diagnostic urbain de Nouakchott, Mauritanie.

        ### üìû Support
        Pour toute question ou suggestion d'am√©lioration, contactez l'√©quipe de d√©veloppement.
        """)

if __name__ == "__main__":
    main()
