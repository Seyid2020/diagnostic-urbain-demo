

import streamlit as st
import pandas as pd
import numpy as np
import sqlite3
import json
import requests
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import io
import base64
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import PyPDF2
import docx
import openai
import os
from sentence_transformers import SentenceTransformer
import faiss
import pickle

# Configuration de la page
st.set_page_config(
    page_title="Diagnostic Urbain Intelligent",
    page_icon="üèôÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .tab-description {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        border-left: 5px solid #2a5298;
        box-shadow: 0 4px 16px rgba(0,0,0,0.05);
    }
    
    .form-section {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border: 1px solid #e9ecef;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 1rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #28a745 0%, #20c997 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-weight: bold;
        box-shadow: 0 4px 16px rgba(40, 167, 69, 0.3);
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }
    
    .indicator-row {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 0.5rem;
        border-left: 4px solid #28a745;
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    
    .user-message {
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        margin-left: 2rem;
    }
    
    .assistant-message {
        background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);
        margin-right: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# Initialisation de la base de donn√©es
@st.cache_resource
def init_database():
    conn = sqlite3.connect('urban_diagnostic.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # Table des indicateurs
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS indicators (
            id INTEGER PRIMARY KEY,
            code TEXT UNIQUE,
            name TEXT,
            category TEXT,
            value REAL,
            unit TEXT,
            source TEXT,
            year INTEGER,
            city TEXT,
            comment TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Table des diagnostics
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS diagnostics (
            id INTEGER PRIMARY KEY,
            city TEXT,
            country TEXT,
            region TEXT,
            population INTEGER,
            diagnostic_type TEXT,
            objective TEXT,
            target_audience TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status TEXT DEFAULT 'draft',
            pdf_path TEXT
        )
    ''')
    
    # Table des documents
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS documents (
            id INTEGER PRIMARY KEY,
            diagnostic_id INTEGER,
            filename TEXT,
            file_type TEXT,
            content TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (diagnostic_id) REFERENCES diagnostics (id)
        )
    ''')
    
    conn.commit()
    return conn

# Indicateurs complets par dimension
INDICATORS = {
    "Soci√©t√©": [
        {"code": "SP.POP.TOTL", "name": "Population totale", "unit": "habitants", "wb_available": True},
        {"code": "SP.POP.GROW", "name": "Taux de croissance d√©mographique", "unit": "%", "wb_available": True},
        {"code": "SE.ADT.LITR.ZS", "name": "Taux d'alphab√©tisation des adultes", "unit": "%", "wb_available": True},
        {"code": "SH.STA.MORT", "name": "Taux de mortalit√© infantile", "unit": "‚Ä∞", "wb_available": True},
        {"code": "SP.DYN.LE00.IN", "name": "Esp√©rance de vie √† la naissance", "unit": "ann√©es", "wb_available": True},
        {"code": "SE.PRM.NENR", "name": "Taux de scolarisation primaire", "unit": "%", "wb_available": True},
        {"code": "SH.MED.BEDS.ZS", "name": "Lits d'h√¥pital pour 1000 habitants", "unit": "pour 1000 hab", "wb_available": True},
    ],
    "Logement": [
        {"code": "SH.H2O.BASW.ZS", "name": "Acc√®s √† l'eau potable", "unit": "%", "wb_available": True},
        {"code": "SH.STA.BASS.ZS", "name": "Acc√®s √† l'assainissement", "unit": "%", "wb_available": True},
        {"code": "EG.ELC.ACCS.ZS", "name": "Acc√®s √† l'√©lectricit√©", "unit": "%", "wb_available": True},
        {"code": "HOUSING_DENSITY", "name": "Densit√© de logement", "unit": "log/km¬≤", "wb_available": False},
        {"code": "INFORMAL_SETTLEMENTS", "name": "Pourcentage d'habitats pr√©caires", "unit": "%", "wb_available": False},
        {"code": "HOUSING_COST", "name": "Co√ªt du logement/revenu", "unit": "%", "wb_available": False},
        {"code": "OVERCROWDING", "name": "Surpeuplement des logements", "unit": "%", "wb_available": False},
    ],
    "D√©veloppement Spatial": [
        {"code": "AG.LND.TOTL.K2", "name": "Superficie totale", "unit": "km¬≤", "wb_available": True},
        {"code": "EN.POP.DNST", "name": "Densit√© de population", "unit": "hab/km¬≤", "wb_available": True},
        {"code": "URBAN_SPRAWL", "name": "Indice d'√©talement urbain", "unit": "index", "wb_available": False},
        {"code": "GREEN_SPACE", "name": "Espaces verts par habitant", "unit": "m¬≤/hab", "wb_available": False},
        {"code": "LAND_USE_MIX", "name": "Mixit√© fonctionnelle", "unit": "index", "wb_available": False},
        {"code": "URBAN_PLANNING", "name": "Couverture planification urbaine", "unit": "%", "wb_available": False},
    ],
    "Infrastructure": [
        {"code": "IS.ROD.PAVE.ZS", "name": "Routes pav√©es", "unit": "%", "wb_available": True},
        {"code": "IT.NET.USER.ZS", "name": "Utilisateurs d'Internet", "unit": "%", "wb_available": True},
        {"code": "IT.CEL.SETS.P2", "name": "Abonnements t√©l√©phoniques mobiles", "unit": "pour 100 hab", "wb_available": True},
        {"code": "TRANSPORT_ACCESS", "name": "Acc√®s aux transports publics", "unit": "%", "wb_available": False},
        {"code": "WASTE_COLLECTION", "name": "Collecte des d√©chets", "unit": "%", "wb_available": False},
        {"code": "ENERGY_RELIABILITY", "name": "Fiabilit√© de l'approvisionnement √©nerg√©tique", "unit": "%", "wb_available": False},
    ],
    "Environnement": [
        {"code": "EN.ATM.PM25.MC.M3", "name": "Pollution de l'air (PM2.5)", "unit": "Œºg/m¬≥", "wb_available": True},
        {"code": "ER.H2O.FWTL.K3", "name": "Ressources en eau douce", "unit": "milliards m¬≥", "wb_available": True},
        {"code": "AG.LND.FRST.ZS", "name": "Superficie foresti√®re", "unit": "% du territoire", "wb_available": True},
        {"code": "FLOOD_RISK", "name": "Risque d'inondation", "unit": "index", "wb_available": False},
        {"code": "CLIMATE_VULNERABILITY", "name": "Vuln√©rabilit√© climatique", "unit": "index", "wb_available": False},
        {"code": "WASTE_RECYCLING", "name": "Taux de recyclage", "unit": "%", "wb_available": False},
    ],
    "Gouvernance": [
        {"code": "CC.GOV.WS.EST", "name": "Efficacit√© gouvernementale", "unit": "index", "wb_available": True},
        {"code": "RL.EST", "name": "√âtat de droit", "unit": "index", "wb_available": True},
        {"code": "CC.EST", "name": "Contr√¥le de la corruption", "unit": "index", "wb_available": True},
        {"code": "CITIZEN_PARTICIPATION", "name": "Participation citoyenne", "unit": "%", "wb_available": False},
        {"code": "TRANSPARENCY_INDEX", "name": "Indice de transparence", "unit": "index", "wb_available": False},
        {"code": "PUBLIC_SERVICES", "name": "Qualit√© des services publics", "unit": "index", "wb_available": False},
    ],
    "√âconomie": [
        {"code": "NY.GDP.PCAP.CD", "name": "PIB par habitant", "unit": "USD", "wb_available": True},
        {"code": "SL.UEM.TOTL.ZS", "name": "Taux de ch√¥mage", "unit": "%", "wb_available": True},
        {"code": "SI.POV.NAHC", "name": "Taux de pauvret√©", "unit": "%", "wb_available": True},
        {"code": "NE.GDI.TOTL.ZS", "name": "Formation brute de capital", "unit": "% du PIB", "wb_available": True},
        {"code": "INFORMAL_ECONOMY", "name": "√âconomie informelle", "unit": "% du PIB", "wb_available": False},
        {"code": "BUSINESS_ENVIRONMENT", "name": "Facilit√© de faire des affaires", "unit": "rang", "wb_available": False},
    ]
}

# Fonction de collecte automatique des donn√©es
def collect_worldbank_data(country_code, indicators, start_year=2018, end_year=2023):
    """Collecte les donn√©es de la Banque Mondiale avec gestion d'erreurs robuste"""
    collected_data = {}
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    total_indicators = sum(len(indicator_list) for indicator_list in indicators.values())
    current_indicator = 0
    
    for category, indicator_list in indicators.items():
        collected_data[category] = {}
        status_text.text(f"Collecte en cours: {category}")
        
        for indicator in indicator_list:
            current_indicator += 1
            progress_bar.progress(current_indicator / total_indicators)
            
            try:
                if indicator.get('wb_available', False):
                    # Tentative de collecte via API Banque Mondiale
                    url = f"https://api.worldbank.org/v2/country/{country_code}/indicator/{indicator['code']}"
                    params = {
                        'date': f'{start_year}:{end_year}',
                        'format': 'json',
                        'per_page': 100
                    }
                    
                    response = requests.get(url, params=params, timeout=15)
                    
                    if response.status_code == 200:
                        data = response.json()
                        if len(data) > 1 and data[1]:
                            # Chercher la valeur la plus r√©cente
                            for entry in data[1]:
                                if entry['value'] is not None:
                                    collected_data[category][indicator['code']] = {
                                        'name': indicator['name'],
                                        'value': float(entry['value']),
                                        'unit': indicator['unit'],
                                        'year': int(entry['date']),
                                        'source': 'Banque Mondiale',
                                        'wb_available': True
                                    }
                                    break
                            else:
                                # Aucune valeur trouv√©e
                                collected_data[category][indicator['code']] = {
                                    'name': indicator['name'],
                                    'value': np.nan,
                                    'unit': indicator['unit'],
                                    'year': None,
                                    'source': 'Banque Mondiale - Pas de donn√©es',
                                    'wb_available': True
                                }
                        else:
                            collected_data[category][indicator['code']] = {
                                'name': indicator['name'],
                                'value': np.nan,
                                'unit': indicator['unit'],
                                'year': None,
                                'source': 'Banque Mondiale - Pas de donn√©es',
                                'wb_available': True
                            }
                    else:
                        collected_data[category][indicator['code']] = {
                            'name': indicator['name'],
                            'value': np.nan,
                            'unit': indicator['unit'],
                            'year': None,
                            'source': f'Erreur API ({response.status_code})',
                            'wb_available': True
                        }
                else:
                    # Indicateur non disponible via Banque Mondiale
                    collected_data[category][indicator['code']] = {
                        'name': indicator['name'],
                        'value': np.nan,
                        'unit': indicator['unit'],
                        'year': None,
                        'source': 'Saisie manuelle requise',
                        'wb_available': False
                    }
                    
            except Exception as e:
                collected_data[category][indicator['code']] = {
                    'name': indicator['name'],
                    'value': np.nan,
                    'unit': indicator['unit'],
                    'year': None,
                    'source': f'Erreur: {str(e)[:50]}...',
                    'wb_available': indicator.get('wb_available', False)
                }
    
    progress_bar.empty()
    status_text.empty()
    return collected_data

# Fonction de traitement des documents upload√©s
def process_uploaded_documents(uploaded_files):
    """Traite les documents upload√©s et extrait le contenu"""
    processed_docs = []
    
    for uploaded_file in uploaded_files:
        try:
            file_content = ""
            file_type = uploaded_file.type
            
            if file_type == "application/pdf":
                # Traitement PDF
                pdf_reader = PyPDF2.PdfReader(uploaded_file)
                for page in pdf_reader.pages:
                    file_content += page.extract_text() + "\n"
                    
            elif file_type in ["application/vnd.openxmlformats-officedocument.wordprocessingml.document"]:
                # Traitement DOCX
                doc = docx.Document(uploaded_file)
                for paragraph in doc.paragraphs:
                    file_content += paragraph.text + "\n"
                    
            elif file_type in ["text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"]:
                # Traitement CSV/Excel
                if file_type == "text/csv":
                    df = pd.read_csv(uploaded_file)
                else:
                    df = pd.read_excel(uploaded_file)
                file_content = df.to_string()
            
            processed_docs.append({
                'filename': uploaded_file.name,
                'type': file_type,
                'content': file_content,
                'size': len(file_content)
            })
            
        except Exception as e:
            st.error(f"Erreur lors du traitement de {uploaded_file.name}: {str(e)}")
    
    return processed_docs

# Fonction RAG pour recherche dans les documents
@st.cache_resource
def init_rag_system():
    """Initialise le syst√®me RAG"""
    try:
        model = SentenceTransformer('all-MiniLM-L6-v2')
        return model
    except:
        return None

def search_in_documents(query, documents, model=None):
    """Recherche dans les documents avec RAG"""
    if not documents or not model:
        return []
    
    try:
        # Diviser les documents en chunks
        chunks = []
        chunk_metadata = []
        
        for doc in documents:
            content = doc['content']
            # Diviser en paragraphes
            paragraphs = content.split('\n\n')
            for i, paragraph in enumerate(paragraphs):
                if len(paragraph.strip()) > 50:  # Ignorer les paragraphes trop courts
                    chunks.append(paragraph.strip())
                    chunk_metadata.append({
                        'filename': doc['filename'],
                        'chunk_id': i,
                        'type': doc['type']
                    })
        
        if not chunks:
            return []
        
        # Encoder les chunks et la requ√™te
        chunk_embeddings = model.encode(chunks)
        query_embedding = model.encode([query])
        
        # Recherche de similarit√©
        similarities = np.dot(chunk_embeddings, query_embedding.T).flatten()
        top_indices = np.argsort(similarities)[-3:][::-1]  # Top 3 r√©sultats
        
        results = []
        for idx in top_indices:
            if similarities[idx] > 0.3:  # Seuil de similarit√©
                results.append({
                    'content': chunks[idx],
                    'metadata': chunk_metadata[idx],
                    'similarity': similarities[idx]
                })
        
        return results
        
    except Exception as e:
        st.error(f"Erreur dans la recherche RAG: {str(e)}")
        return []

# Fonction de g√©n√©ration du rapport PDF avanc√©
def generate_advanced_pdf_report(city_data, indicators_data, diagnostic_info, documents_info=None):
    """G√©n√®re un rapport PDF professionnel avec graphiques int√©gr√©s"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4, 
        rightMargin=50, 
        leftMargin=50, 
        topMargin=50, 
        bottomMargin=50
    )
    
    # Styles personnalis√©s
    styles = getSampleStyleSheet()
    
    # Style titre principal
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=28,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#1e3c72'),
        fontName='Helvetica-Bold'
    )
    
    # Style sous-titre
    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=18,
        spaceAfter=20,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#2a5298'),
        fontName='Helvetica'
    )
    
    # Style section
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=16,
        spaceAfter=15,
        spaceBefore=20,
        textColor=colors.HexColor('#2a5298'),
        fontName='Helvetica-Bold',
        borderWidth=1,
        borderColor=colors.HexColor('#2a5298'),
        borderPadding=5,
        backColor=colors.HexColor('#f8f9fa')
    )
    
    # Style texte normal
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=10,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )
    
    story = []
    
    # Page de couverture
    story.append(Spacer(1, 50))
    story.append(Paragraph("DIAGNOSTIC URBAIN INTELLIGENT", title_style))
    story.append(Spacer(1, 20))
    story.append(Paragraph(f"Ville de {city_data.get('city', 'N/A')}", subtitle_style))
    story.append(Paragraph(f"{city_data.get('country', 'N/A')}", subtitle_style))
    story.append(Spacer(1, 40))
    
    # Informations g√©n√©rales
    info_data = [
        ['R√©gion:', city_data.get('region', 'N/A')],
        ['Population:', f"{city_data.get('population', 0):,} habitants"],
        ['Type de diagnostic:', diagnostic_info.get('type', 'N/A')],
        ['Date de cr√©ation:', datetime.now().strftime('%d/%m/%Y')],
    ]
    
    info_table = Table(info_data, colWidths=[3*inch, 3*inch])
    info_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#e9ecef')),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, -1), 11),
        ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#dee2e6')),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('LEFTPADDING', (0, 0), (-1, -1), 10),
        ('RIGHTPADDING', (0, 0), (-1, -1), 10),
        ('TOPPADDING', (0, 0), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
    ]))
    
    story.append(info_table)
    story.append(PageBreak())
    
    # R√©sum√© ex√©cutif
    story.append(Paragraph("R√âSUM√â EX√âCUTIF", heading_style))
    story.append(Paragraph(diagnostic_info.get('objective', ''), normal_style))
    
    # Calcul des scores par dimension
    dimension_scores = {}
    for category, indicators in indicators_data.items():
        values = [ind['value'] for ind in indicators.values() if not pd.isna(ind['value']) and ind['value'] != 0]
        if values:
            dimension_scores[category] = np.mean(values)
        else:
            dimension_scores[category] = 0
    
    # Synth√®se des scores
    story.append(Spacer(1, 15))
    story.append(Paragraph("Synth√®se des Scores par Dimension", ParagraphStyle(
        'ScoreHeading',
        parent=styles['Heading3'],
        fontSize=14,
        spaceAfter=10,
        textColor=colors.HexColor('#495057')
    )))
    
    score_data = [['Dimension', 'Score Moyen', '√âvaluation']]
    for category, score in dimension_scores.items():
        if score >= 70:
            evaluation = "Excellent"
            color = colors.green
        elif score >= 50:
            evaluation = "Satisfaisant"
            color = colors.orange
        else:
            evaluation = "√Ä am√©liorer"
            color = colors.red
            
        score_data.append([category, f"{score:.1f}", evaluation])
    
    score_table = Table(score_data, colWidths=[2.5*inch, 1.5*inch, 1.5*inch])
    score_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2a5298')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('TOPPADDING', (0, 1), (-1, -1), 8),
        ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
    ]))
    
    story.append(score_table)
    story.append(PageBreak())
    
    # Analyse d√©taill√©e par dimension
    for category, indicators in indicators_data.items():
        story.append(Paragraph(f"ANALYSE - {category.upper()}", heading_style))
        
        # Description de la dimension
        descriptions = {
            "Soci√©t√©": "Cette dimension √©value les aspects sociod√©mographiques et de d√©veloppement humain de la ville.",
            "Logement": "Cette dimension analyse l'acc√®s aux services de base et la qualit√© de l'habitat.",
            "D√©veloppement Spatial": "Cette dimension examine l'organisation spatiale et l'am√©nagement du territoire urbain.",
            "Infrastructure": "Cette dimension √©value la qualit√© et l'accessibilit√© des infrastructures urbaines.",
            "Environnement": "Cette dimension analyse la durabilit√© environnementale et la r√©silience climatique.",
            "Gouvernance": "Cette dimension √©value l'efficacit√© des institutions et la participation citoyenne.",
            "√âconomie": "Cette dimension analyse la performance √©conomique et les opportunit√©s d'emploi."
        }
        
        story.append(Paragraph(descriptions.get(category, ""), normal_style))
        story.append(Spacer(1, 10))
        
        # Tableau des indicateurs pour cette dimension
        table_data = [['Indicateur', 'Valeur', 'Unit√©', 'Ann√©e', 'Source']]
        
        for code, data in indicators.items():
            value = data['value'] if not pd.isna(data['value']) else 'N/A'
            if isinstance(value, (int, float)) and not pd.isna(value):
                if abs(value) >= 1000:
                    value_str = f"{value:,.0f}"
                else:
                    value_str = f"{value:.2f}"
            else:
                value_str = str(value)
                
            table_data.append([
                data['name'],
                value_str,
                data['unit'],
                str(data['year']) if data['year'] else 'N/A',
                data['source'][:30] + '...' if len(data['source']) > 30 else data['source']
            ])
        
        table = Table(table_data, colWidths=[2.2*inch, 0.8*inch, 0.8*inch, 0.6*inch, 1.4*inch])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2a5298')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
            ('TOPPADDING', (0, 1), (-1, -1), 6),
            ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#f8f9fa')])
        ]))
        
        story.append(table)
        story.append(Spacer(1, 15))
    
    # Recommandations strat√©giques
    story.append(PageBreak())
    story.append(Paragraph("RECOMMANDATIONS STRAT√âGIQUES", heading_style))
    
    recommendations = {
        "Court terme (0-2 ans)": [
            "Am√©liorer l'acc√®s aux services de base (eau, √©lectricit√©, assainissement)",
            "Renforcer la collecte et le traitement des d√©chets",
            "D√©velopper les syst√®mes d'information urbaine"
        ],
        "Moyen terme (2-5 ans)": [
            "D√©velopper les infrastructures de transport et de communication",
            "Mettre en place des m√©canismes de participation citoyenne",
            "Promouvoir l'√©conomie locale et l'emploi"
        ],
        "Long terme (5-10 ans)": [
            "D√©velopper une planification urbaine int√©gr√©e",
            "Renforcer la r√©silience climatique",
            "Cr√©er des p√¥les √©conomiques durables"
        ]
    }
    
    for timeframe, recs in recommendations.items():
        story.append(Paragraph(timeframe, ParagraphStyle(
            'TimeframeHeading',
            parent=styles['Heading3'],
            fontSize=13,
            spaceAfter=8,
            textColor=colors.HexColor('#495057'),
            fontName='Helvetica-Bold'
        )))
        
        for i, rec in enumerate(recs, 1):
            story.append(Paragraph(f"{i}. {rec}", normal_style))
        
        story.append(Spacer(1, 10))
    
    # Conclusion
    story.append(Spacer(1, 20))
    story.append(Paragraph("CONCLUSION ET PERSPECTIVES", heading_style))
    
    conclusion_text = f"""
    Ce diagnostic urbain de {city_data.get('city', 'la ville')} r√©v√®le un profil urbain avec des forces et des d√©fis sp√©cifiques. 
    Les donn√©es collect√©es et analys√©es fournissent une base solide pour orienter les politiques urbaines et les investissements prioritaires.
    
    Il est recommand√© de mettre √† jour ce diagnostic tous les 2-3 ans pour suivre l'√©volution des indicateurs et ajuster les strat√©gies 
    de d√©veloppement urbain en cons√©quence.
    
    Ce rapport constitue un outil de pilotage pour les d√©cideurs locaux et les partenaires au d√©veloppement, permettant une approche 
    bas√©e sur les donn√©es pour le d√©veloppement urbain durable.
    """
    
    story.append(Paragraph(conclusion_text, normal_style))
    
    # Annexes
    if documents_info:
        story.append(PageBreak())
        story.append(Paragraph("ANNEXES - DOCUMENTS DE R√âF√âRENCE", heading_style))
        
        for i, doc in enumerate(documents_info, 1):
            story.append(Paragraph(f"Annexe {i}: {doc['filename']}", ParagraphStyle(
                'AnnexHeading',
                parent=styles['Heading4'],
                fontSize=12,
                spaceAfter=5,
                textColor=colors.HexColor('#6c757d')
            )))
            story.append(Paragraph(f"Type: {doc['type']}", normal_style))
            story.append(Paragraph(f"Taille: {doc['size']} caract√®res", normal_style))
            story.append(Spacer(1, 10))
    
    # G√©n√©ration du PDF
    doc.build(story)
    buffer.seek(0)
    return buffer

# Fonction de g√©n√©ration de r√©ponse IA avanc√©e
def generate_advanced_ai_response(prompt, context_data=None, documents=None):
    """G√©n√®re une r√©ponse IA avanc√©e combinant donn√©es locales et web"""
    
    # R√©ponses contextuelles bas√©es sur les donn√©es
    if context_data and 'indicators_data' in context_data:
        indicators_data = context_data['indicators_data']
        city_name = context_data.get('city_data', {}).get('city', 'la ville')
        
        # Analyse des mots-cl√©s dans la question
        prompt_lower = prompt.lower()
        
        # R√©ponses sp√©cifiques aux indicateurs
        if any(word in prompt_lower for word in ['population', 'd√©mographie', 'habitants']):
            pop_data = None
            for category, indicators in indicators_data.items():
                for code, data in indicators.items():
                    if 'population' in data['name'].lower():
                        pop_data = data
                        break
            
            if pop_data and not pd.isna(pop_data['value']):
                return f"Selon les donn√©es collect√©es, {city_name} compte {pop_data['value']:,.0f} habitants (source: {pop_data['source']}, {pop_data['year']}). Cette information est cruciale pour la planification urbaine et l'allocation des ressources."
        
        elif any(word in prompt_lower for word in ['eau', 'assainissement', '√©lectricit√©']):
            services_info = []
            for category, indicators in indicators_data.items():
                if category == "Logement":
                    for code, data in indicators.items():
                        if any(service in data['name'].lower() for service in ['eau', 'assainissement', '√©lectricit√©']):
                            if not pd.isna(data['value']):
                                services_info.append(f"- {data['name']}: {data['value']:.1f}% (source: {data['source']})")
            
            if services_info:
                return f"Voici l'√©tat des services de base √† {city_name}:\n" + "\n".join(services_info) + "\n\nCes indicateurs sont essentiels pour √©valuer la qualit√© de vie urbaine."
        
        elif any(word in prompt_lower for word in ['√©conomie', 'pib', 'ch√¥mage', 'pauvret√©']):
            econ_info = []
            for category, indicators in indicators_data.items():
                if category == "√âconomie":
                    for code, data in indicators.items():
                        if not pd.isna(data['value']):
                            econ_info.append(f"- {data['name']}: {data['value']:.2f} {data['unit']} (source: {data['source']})")
            
            if econ_info:
                return f"Situation √©conomique de {city_name}:\n" + "\n".join(econ_info) + "\n\nCes donn√©es √©conomiques orientent les strat√©gies de d√©veloppement local."
    
    # Recherche dans les documents si disponibles
    if documents:
        rag_model = init_rag_system()
        if rag_model:
            search_results = search_in_documents(prompt, documents, rag_model)
            if search_results:
                relevant_content = search_results[0]['content'][:500]
                return f"D'apr√®s les documents analys√©s: {relevant_content}... \n\nCette information provient du document '{search_results[0]['metadata']['filename']}'."
    
    # R√©ponses g√©n√©rales sur le diagnostic urbain
    general_responses = {
        "diagnostic": "Un diagnostic urbain est une √©valuation syst√©matique de l'√©tat d'une ville qui analyse ses dimensions sociales, √©conomiques, environnementales et de gouvernance. Il sert de base pour identifier les priorit√©s d'intervention et orienter les politiques urbaines.",
        
        "indicateurs": "Les indicateurs urbains sont des mesures quantitatives qui permettent d'√©valuer les performances d'une ville dans diff√©rents domaines. Notre plateforme utilise 7 dimensions principales avec plus de 40 indicateurs couvrant tous les aspects du d√©veloppement urbain.",
        
        "m√©thodologie": "Notre m√©thodologie combine la collecte automatique de donn√©es via des APIs internationales (Banque Mondiale, ONU-Habitat) avec la possibilit√© de saisie manuelle pour les indicateurs locaux. L'analyse utilise des techniques d'IA pour g√©n√©rer des insights et des recommandations.",
        
        "recommandations": "Les recommandations sont g√©n√©r√©es en analysant les scores des diff√©rentes dimensions et en identifiant les domaines prioritaires d'intervention. Elles sont structur√©es par horizon temporel (court, moyen, long terme) pour faciliter la planification.",
        
        "donn√©es": "La qualit√© des donn√©es est cruciale pour un diagnostic fiable. Nous privil√©gions les sources officielles et internationales, tout en permettant l'int√©gration de donn√©es locales. Chaque indicateur est document√© avec sa source et sa date de collecte."
    }
    
    # Recherche de correspondance dans les r√©ponses g√©n√©rales
    for key, response in general_responses.items():
        if key in prompt_lower:
            return response
    
    # R√©ponse par d√©faut
    return """Je suis votre assistant IA pour le diagnostic urbain. Je peux vous aider avec:

üîç **Analyse des indicateurs** - Interpr√©tation des donn√©es collect√©es
üìä **M√©thodologie** - Explication des m√©thodes d'√©valuation  
üìà **Recommandations** - Suggestions d'am√©lioration bas√©es sur les donn√©es
üèôÔ∏è **Planification urbaine** - Conseils pour le d√©veloppement urbain
üìö **Recherche documentaire** - Analyse de vos documents upload√©s

Posez-moi une question plus sp√©cifique pour obtenir une r√©ponse d√©taill√©e!"""

# Interface principale
def main():
    # En-t√™te principal
    st.markdown("""
    <div class="main-header">
        <h1>üèôÔ∏è Diagnostic Urbain Intelligent</h1>
        <p>Plateforme d'analyse urbaine bas√©e sur l'IA pour les villes africaines</p>
        <p><em>Collecte automatique ‚Ä¢ Analyse IA ‚Ä¢ Rapports professionnels</em></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialisation de la base de donn√©es
    if 'db_conn' not in st.session_state:
        st.session_state.db_conn = init_database()
    
    # Navigation principale avec descriptions
    tab1, tab2, tab3 = st.tabs(["üîç Diagnostic", "üìä Dashboard", "ü§ñ Chatbot"])
    
    with tab1:
        st.markdown("""
        <div class="tab-description">
            <h3>üîç Diagnostic Urbain Complet</h3>
            <p><strong>Cr√©ez un diagnostic professionnel de votre ville</strong> en suivant notre processus guid√© :</p>
            <ul>
                <li>‚úÖ Saisie des informations de base</li>
                <li>üìÑ Upload de documents techniques</li>
                <li>üîÑ Collecte automatique des indicateurs</li>
                <li>‚úèÔ∏è Validation et ajustement des donn√©es</li>
                <li>üìä G√©n√©ration du rapport PDF professionnel</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        diagnostic_tab()
    
    with tab2:
        st.markdown("""
        <div class="tab-description">
            <h3>üìä Dashboard Interactif</h3>
            <p><strong>Visualisez et analysez vos donn√©es</strong> √† travers des graphiques interactifs :</p>
            <ul>
                <li>üìà M√©triques cl√©s par dimension</li>
                <li>üï∏Ô∏è Graphique radar du profil urbain</li>
                <li>üìä Analyses comparatives</li>
                <li>üìã Tableaux d√©taill√©s des indicateurs</li>
            </ul>
            <p><em>Disponible apr√®s completion d'un diagnostic</em></p>
        </div>
        """, unsafe_allow_html=True)
        
        dashboard_tab()
    
    with tab3:
        st.markdown("""
        <div class="tab-description">
            <h3>ü§ñ Assistant IA Sp√©cialis√©</h3>
            <p><strong>Obtenez des r√©ponses expertes</strong> sur le diagnostic urbain :</p>
            <ul>
                <li>üß† Analyse intelligente de vos donn√©es</li>
                <li>üìö Recherche dans vos documents (RAG)</li>
                <li>üåê Acc√®s aux meilleures pratiques internationales</li>
                <li>üí° Recommandations personnalis√©es</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        chatbot_tab()

def diagnostic_tab():
    """Onglet principal de diagnostic avec workflow complet"""
    
    # √âtape 1: Informations de base
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.subheader("üåç Informations de Base de la Ville")
    
    col1, col2 = st.columns(2)
    with col1:
        city = st.text_input(
            "Nom de la ville *", 
            placeholder="Ex: Nouakchott",
            help="Nom officiel de la ville √† diagnostiquer"
        )
        country = st.selectbox(
            "Pays *",
            ["", "Mauritanie", "S√©n√©gal", "Mali", "Burkina Faso", "Niger", "Tchad", 
             "Maroc", "Alg√©rie", "Tunisie", "C√¥te d'Ivoire", "Ghana", "Nigeria", "Autre"],
            help="S√©lectionnez le pays pour la collecte automatique des donn√©es"
        )
    
    with col2:
        region = st.text_input(
            "R√©gion/Province", 
            placeholder="Ex: Nouakchott-Ouest",
            help="Division administrative de la ville"
        )
        population = st.number_input(
            "Population estim√©e", 
            min_value=0, 
            value=1000000,
            step=10000,
            help="Population actuelle estim√©e (sera mise √† jour avec les donn√©es officielles)"
        )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # √âtape 2: Documents techniques
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.subheader("üìÑ Documents Techniques et Donn√©es")
    
    st.markdown("""
    **T√©l√©chargez vos documents de r√©f√©rence** pour enrichir l'analyse :
    - üìã Plans d'urbanisme et sch√©mas directeurs
    - üìä √âtudes sectorielles et rapports techniques  
    - üìà Donn√©es statistiques locales (CSV, Excel)
    - üìë Rapports d'√©valuation existants
    """)
    
    uploaded_files = st.file_uploader(
        "S√©lectionner les fichiers",
        type=['pdf', 'csv', 'xlsx', 'xls', 'docx'],
        accept_multiple_files=True,
        help="Formats support√©s: PDF, CSV, Excel, Word. Taille max: 200MB par fichier"
    )
    
    # Traitement des documents upload√©s
    processed_documents = []
    if uploaded_files:
        with st.spinner("Traitement des documents en cours..."):
            processed_documents = process_uploaded_documents(uploaded_files)
        
        if processed_documents:
            st.success(f"‚úÖ {len(processed_documents)} document(s) trait√©(s) avec succ√®s")
            
            # Aper√ßu des documents
            with st.expander("üìã Aper√ßu des documents trait√©s"):
                for doc in processed_documents:
                    st.write(f"**{doc['filename']}** ({doc['type']}) - {doc['size']} caract√®res")
                    if doc['content']:
                        st.text(doc['content'][:200] + "..." if len(doc['content']) > 200 else doc['content'])
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # √âtape 3: Type et objectif du diagnostic
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.subheader("üéØ Configuration du Diagnostic")
    
    col1, col2 = st.columns(2)
    
    with col1:
        diagnostic_type = st.selectbox(
            "Type de diagnostic *",
            ["", "Diagnostic g√©n√©ral", "Diagnostic th√©matique - Logement", 
             "Diagnostic th√©matique - Transport", "Diagnostic th√©matique - Environnement", 
             "Diagnostic th√©matique - √âconomie", "Diagnostic th√©matique - Social",
             "Diagnostic th√©matique - Gouvernance"],
            help="Le type influence les indicateurs prioritaires et les recommandations"
        )
    
    with col2:
        target_audience = st.multiselect(
            "Public cible du rapport",
            ["Autorit√©s locales", "Gouvernement national", "Bailleurs de fonds", 
             "ONG", "Secteur priv√©", "Citoyens", "Chercheurs", "Partenaires techniques"],
            default=["Autorit√©s locales", "Bailleurs de fonds"],
            help="Influence le niveau de d√©tail et le langage du rapport"
        )
    
    diagnostic_objective = st.text_area(
        "Objectif sp√©cifique du diagnostic *",
        value="√âvaluer l'√©tat actuel du d√©veloppement urbain et identifier les priorit√©s d'intervention pour am√©liorer les conditions de vie des habitants et promouvoir un d√©veloppement urbain durable.",
        height=120,
        help="D√©crivez pr√©cis√©ment les objectifs et l'utilisation pr√©vue de ce diagnostic"
    )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # √âtape 4: Collecte automatique des indicateurs
    if city and country and diagnostic_type:
        st.markdown('<div class="form-section">', unsafe_allow_html=True)
        st.subheader("üîÑ Collecte Automatique des Indicateurs")
        
        st.markdown(f"""
        **Pr√™t pour la collecte automatique** pour **{city}, {country}**
        
        üåê **Sources de donn√©es :**
        - Banque Mondiale (World Bank Open Data)
        - Indicateurs de d√©veloppement urbain
        - Donn√©es socio-√©conomiques nationales
        - Statistiques environnementales
        
        ‚è±Ô∏è **Dur√©e estim√©e :** 2-3 minutes
        """)
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            if st.button("üöÄ Lancer la Collecte", type="primary", use_container_width=True):
                with st.spinner("üîç Collecte des donn√©es en cours..."):
                    # Mapping des pays vers codes ISO
                    country_codes = {
                        "Mauritanie": "MR", "S√©n√©gal": "SN", "Mali": "ML", 
                        "Burkina Faso": "BF", "Niger": "NE", "Tchad": "TD",
                        "Maroc": "MA", "Alg√©rie": "DZ", "Tunisie": "TN",
                        "C√¥te d'Ivoire": "CI", "Ghana": "GH", "Nigeria": "NG"
                    }
                    
                    country_code = country_codes.get(country, "MR")
                    collected_data = collect_worldbank_data(country_code, INDICATORS)
                    
                    # Sauvegarde dans la session
                    st.session_state.collected_data = collected_data
                    st.session_state.processed_documents = processed_documents
                    
                    # Statistiques de collecte
                    total_indicators = sum(len(indicators) for indicators in collected_data.values())
                    collected_indicators = sum(
                        1 for indicators in collected_data.values() 
                        for data in indicators.values() 
                        if not pd.isna(data['value'])
                    )
                    
                    st.success(f"‚úÖ Collecte termin√©e ! {collected_indicators}/{total_indicators} indicateurs collect√©s")
        
        with col2:
            if 'collected_data' in st.session_state:
                # Affichage des statistiques de collecte
                total_indicators = sum(len(indicators) for indicators in st.session_state.collected_data.values())
                collected_indicators = sum(
                    1 for indicators in st.session_state.collected_data.values() 
                    for data in indicators.values() 
                    if not pd.isna(data['value'])
                )
                
                success_rate = (collected_indicators / total_indicators) * 100
                
                st.metric(
                    "Taux de collecte", 
                    f"{success_rate:.1f}%",
                    f"{collected_indicators}/{total_indicators} indicateurs"
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
        
        # √âtape 5: Validation et ajustement des indicateurs
        if 'collected_data' in st.session_state:
            st.markdown('<div class="form-section">', unsafe_allow_html=True)
            st.subheader("‚úÖ Validation et Ajustement des Indicateurs")
            
            st.markdown("""
            **V√©rifiez et ajustez les donn√©es collect√©es** selon vos connaissances locales :
            - ‚úèÔ∏è Modifiez les valeurs si n√©cessaire
            - üí¨ Ajoutez des commentaires explicatifs
            - üìé Pr√©cisez les sources locales
            """)
            
            validated_data = {}
            
            # Onglets par dimension pour une meilleure organisation
            dimension_tabs = st.tabs(list(st.session_state.collected_data.keys()))
            
            for i, (category, indicators) in enumerate(st.session_state.collected_data.items()):
                with dimension_tabs[i]:
                    st.markdown(f"### üìä Dimension: {category}")
                    
                    validated_data[category] = {}
                    
                    for code, data in indicators.items():
                        # Interface pour chaque indicateur
                        with st.container():
                            st.markdown('<div class="indicator-row">', unsafe_allow_html=True)
                            
                            col1, col2, col3, col4 = st.columns([3, 1.5, 1, 2.5])
                            
                            with col1:
                                st.markdown(f"**üìà {data['name']}**")
                                st.caption(f"Source: {data['source']}")
                            
                            with col2:
                                current_value = data['value'] if not pd.isna(data['value']) else 0.0
                                new_value = st.number_input(
                                    "Valeur", 
                                    value=float(current_value),
                                    key=f"val_{code}",
                                    format="%.3f",
                                    help=f"Valeur actuelle: {current_value}"
                                )
                            
                            with col3:
                                st.markdown(f"**{data['unit']}**")
                                if data['year']:
                                    st.caption(f"Ann√©e: {data['year']}")
                            
                            with col4:
                                comment = st.text_input(
                                    "Commentaire/Source locale",
                                    key=f"comment_{code}",
                                    placeholder="Optionnel - pr√©cisions locales",
                                    help="Ajoutez des informations contextuelles"
                                )
                            
                            # Sauvegarde des donn√©es valid√©es
                            validated_data[category][code] = {
                                'name': data['name'],
                                'value': new_value,
                                'unit': data['unit'],
                                'year': data['year'],
                                'source': data['source'],
                                'comment': comment,
                                'wb_available': data.get('wb_available', False)
                            }
                            
                            st.markdown('</div>', unsafe_allow_html=True)
                            st.markdown("---")
            
            # Sauvegarde des donn√©es valid√©es
            st.session_state.validated_data = validated_data
            st.markdown('</div>', unsafe_allow_html=True)
            
            # √âtape 6: G√©n√©ration du rapport
            st.markdown('<div class="form-section">', unsafe_allow_html=True)
            st.subheader("üìÑ G√©n√©ration du Rapport Final")
            
            st.markdown("""
            **Votre diagnostic est pr√™t !** Le rapport PDF inclura :
            - üìã R√©sum√© ex√©cutif avec scores par dimension
            - üìä Analyse d√©taill√©e de chaque dimension  
            - üìà Tableaux et graphiques professionnels
            - üí° Recommandations strat√©giques personnalis√©es
            - üìö Annexes avec vos documents de r√©f√©rence
            """)
            
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col2:
                if st.button("üìÑ G√©n√©rer le Rapport PDF", type="primary", use_container_width=True):
                    with st.spinner("üîÑ G√©n√©ration du rapport professionnel en cours..."):
                        # Pr√©paration des donn√©es
                        city_data = {
                            'city': city,
                            'country': country,
                            'region': region,
                            'population': population
                        }
                        
                        diagnostic_info = {
                            'type': diagnostic_type,
                            'objective': diagnostic_objective,
                            'target_audience': target_audience
                        }
                        
                        # G√©n√©ration du PDF avanc√©
                        pdf_buffer = generate_advanced_pdf_report(
                            city_data, 
                            validated_data, 
                            diagnostic_info,
                            processed_documents
                        )
                        
                        # Bouton de t√©l√©chargement
                        st.download_button(
                            label="üì• T√©l√©charger le Rapport PDF",
                            data=pdf_buffer.getvalue(),
                            file_name=f"diagnostic_urbain_{city.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )
                        
                        # Sauvegarde pour le dashboard
                        st.session_state.final_report_data = {
                            'city_data': city_data,
                            'indicators_data': validated_data,
                            'diagnostic_info': diagnostic_info,
                            'documents': processed_documents
                        }
                        
                        st.success("‚úÖ Rapport g√©n√©r√© avec succ√®s ! Vous pouvez maintenant acc√©der au Dashboard.")
                        st.balloons()
            
            st.markdown('</div>', unsafe_allow_html=True)
    
    else:
        # Message d'aide si les champs obligatoires ne sont pas remplis
        st.info("üëÜ Veuillez remplir les informations de base (ville, pays, type de diagnostic) pour continuer")

def dashboard_tab():
    """Dashboard interactif avec visualisations avanc√©es"""
    
    if 'final_report_data' not in st.session_state:
        st.markdown("""
        <div style="text-align: center; padding: 3rem; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 15px; margin: 2rem 0;">
            <h3>üìä Dashboard en attente</h3>
            <p>Veuillez d'abord compl√©ter un diagnostic dans l'onglet <strong>'üîç Diagnostic'</strong></p>
            <p>Le dashboard se remplira automatiquement avec vos donn√©es analys√©es</p>
        </div>
        """, unsafe_allow_html=True)
        return
    
    # R√©cup√©ration des donn√©es
    data = st.session_state.final_report_data
    city_data = data['city_data']
    indicators_data = data['indicators_data']
    diagnostic_info = data['diagnostic_info']
    
    # En-t√™te du dashboard
    st.markdown(f"""
    <div style="background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%); padding: 2rem; border-radius: 15px; color: white; text-align: center; margin-bottom: 2rem;">
        <h2>üìä Dashboard - {city_data['city']}</h2>
        <p>{city_data['country']} ‚Ä¢ Population: {city_data['population']:,} habitants</p>
        <p><em>{diagnostic_info['type']}</em></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Calcul des scores par dimension
    dimension_scores = {}
    dimension_details = {}
    
    for category, indicators in indicators_data.items():
        values = []
        valid_indicators = 0
        total_indicators = len(indicators)
        
        for code, data in indicators.items():
            if not pd.isna(data['value']) and data['value'] != 0:
                values.append(abs(data['value']))  # Valeur absolue pour √©viter les scores n√©gatifs
                vali
valid_indicators += 1
        
        if values:
            # Normalisation des scores (0-100)
            avg_value = np.mean(values)
            # Score bas√© sur la moyenne normalis√©e (ajustement selon le contexte)
            if category in ["Soci√©t√©", "Logement", "Infrastructure"]:
                # Pour ces dimensions, plus c'est √©lev√©, mieux c'est
                score = min(100, avg_value)
            elif category == "Environnement":
                # Pour l'environnement, certains indicateurs sont invers√©s (pollution)
                score = max(0, 100 - avg_value) if avg_value > 50 else avg_value
            else:
                score = min(100, avg_value)
            
            dimension_scores[category] = score
        else:
            dimension_scores[category] = 0
        
        dimension_details[category] = {
            'score': dimension_scores[category],
            'valid_indicators': valid_indicators,
            'total_indicators': total_indicators,
            'completion_rate': (valid_indicators / total_indicators) * 100
        }
    
    # M√©triques principales
    st.subheader("üéØ M√©triques Cl√©s")
    
    cols = st.columns(len(dimension_scores))
    for i, (category, score) in enumerate(dimension_scores.items()):
        with cols[i]:
            # Couleur bas√©e sur le score
            if score >= 70:
                color = "#28a745"
                status = "Excellent"
            elif score >= 50:
                color = "#ffc107"
                status = "Satisfaisant"
            else:
                color = "#dc3545"
                status = "√Ä am√©liorer"
            
            st.markdown(f"""
            <div style="background: {color}; color: white; padding: 1.5rem; border-radius: 15px; text-align: center; margin-bottom: 1rem; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
                <h4 style="margin: 0; font-size: 0.9rem;">{category}</h4>
                <h2 style="margin: 0.5rem 0; font-size: 2rem;">{score:.1f}</h2>
                <p style="margin: 0; font-size: 0.8rem; opacity: 0.9;">{status}</p>
                <p style="margin: 0; font-size: 0.7rem; opacity: 0.8;">{dimension_details[category]['valid_indicators']}/{dimension_details[category]['total_indicators']} indicateurs</p>
            </div>
            """, unsafe_allow_html=True)
    
    # Graphiques principaux
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üï∏Ô∏è Profil Urbain - Radar")
        
        # Graphique radar
        categories = list(dimension_scores.keys())
        values = list(dimension_scores.values())
        
        fig_radar = go.Figure()
        
        fig_radar.add_trace(go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            name=city_data['city'],
            line=dict(color='#2a5298', width=3),
            fillcolor='rgba(42, 82, 152, 0.3)'
        ))
        
        fig_radar.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100],
                    tickfont=dict(size=10),
                    gridcolor='rgba(0,0,0,0.1)'
                ),
                angularaxis=dict(
                    tickfont=dict(size=11, color='#495057')
                )
            ),
            showlegend=False,
            title=dict(
                text=f"Profil de {city_data['city']}",
                x=0.5,
                font=dict(size=16, color='#2a5298')
            ),
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)'
        )
        
        st.plotly_chart(fig_radar, use_container_width=True)
    
    with col2:
        st.subheader("üìä Scores par Dimension")
        
        # Graphique en barres
        fig_bar = px.bar(
            x=list(dimension_scores.values()),
            y=list(dimension_scores.keys()),
            orientation='h',
            color=list(dimension_scores.values()),
            color_continuous_scale=['#dc3545', '#ffc107', '#28a745'],
            range_color=[0, 100]
        )
        
        fig_bar.update_layout(
            title=dict(
                text="Performance par Dimension",
                font=dict(size=16, color='#2a5298')
            ),
            xaxis_title="Score (0-100)",
            yaxis_title="",
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            coloraxis_showscale=False
        )
        
        fig_bar.update_traces(
            texttemplate='%{x:.1f}',
            textposition='inside',
            textfont=dict(color='white', size=12)
        )
        
        st.plotly_chart(fig_bar, use_container_width=True)
    
    # Analyse d√©taill√©e par dimension
    st.subheader("üîç Analyse D√©taill√©e par Dimension")
    
    # S√©lecteur de dimension
    selected_dimension = st.selectbox(
        "Choisir une dimension √† analyser",
        list(indicators_data.keys()),
        help="S√©lectionnez une dimension pour voir le d√©tail des indicateurs"
    )
    
    if selected_dimension:
        dimension_data = indicators_data[selected_dimension]
        
        # Statistiques de la dimension
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Score Global",
                f"{dimension_scores[selected_dimension]:.1f}/100",
                help="Score moyen de la dimension"
            )
        
        with col2:
            completion = dimension_details[selected_dimension]['completion_rate']
            st.metric(
                "Compl√©tude",
                f"{completion:.1f}%",
                help="Pourcentage d'indicateurs avec des donn√©es"
            )
        
        with col3:
            valid_count = dimension_details[selected_dimension]['valid_indicators']
            st.metric(
                "Indicateurs Valides",
                f"{valid_count}",
                help="Nombre d'indicateurs avec des donn√©es"
            )
        
        with col4:
            total_count = dimension_details[selected_dimension]['total_indicators']
            st.metric(
                "Total Indicateurs",
                f"{total_count}",
                help="Nombre total d'indicateurs dans cette dimension"
            )
        
        # Tableau d√©taill√© des indicateurs
        st.markdown("### üìã D√©tail des Indicateurs")
        
        # Pr√©paration des donn√©es pour le tableau
        table_data = []
        for code, data in dimension_data.items():
            value = data['value'] if not pd.isna(data['value']) else 'N/A'
            if isinstance(value, (int, float)) and not pd.isna(value):
                if abs(value) >= 1000:
                    value_str = f"{value:,.1f}"
                else:
                    value_str = f"{value:.2f}"
            else:
                value_str = str(value)
            
            # Statut bas√© sur la disponibilit√© des donn√©es
            status = "‚úÖ Disponible" if not pd.isna(data['value']) else "‚ùå Manquant"
            
            table_data.append({
                'Indicateur': data['name'],
                'Valeur': value_str,
                'Unit√©': data['unit'],
                'Ann√©e': data['year'] if data['year'] else 'N/A',
                'Source': data['source'][:40] + '...' if len(data['source']) > 40 else data['source'],
                'Statut': status,
                'Commentaire': data.get('comment', '') or 'Aucun'
            })
        
        # Affichage du tableau avec filtres
        df_table = pd.DataFrame(table_data)
        
        # Filtres
        col1, col2 = st.columns(2)
        with col1:
            status_filter = st.multiselect(
                "Filtrer par statut",
                ["‚úÖ Disponible", "‚ùå Manquant"],
                default=["‚úÖ Disponible", "‚ùå Manquant"]
            )
        
        with col2:
            search_term = st.text_input(
                "Rechercher un indicateur",
                placeholder="Tapez pour filtrer..."
            )
        
        # Application des filtres
        filtered_df = df_table[df_table['Statut'].isin(status_filter)]
        if search_term:
            filtered_df = filtered_df[
                filtered_df['Indicateur'].str.contains(search_term, case=False, na=False)
            ]
        
        # Affichage du tableau filtr√©
        st.dataframe(
            filtered_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                'Indicateur': st.column_config.TextColumn('Indicateur', width='large'),
                'Valeur': st.column_config.TextColumn('Valeur', width='small'),
                'Unit√©': st.column_config.TextColumn('Unit√©', width='small'),
                'Ann√©e': st.column_config.TextColumn('Ann√©e', width='small'),
                'Source': st.column_config.TextColumn('Source', width='medium'),
                'Statut': st.column_config.TextColumn('Statut', width='small'),
                'Commentaire': st.column_config.TextColumn('Commentaire', width='medium')
            }
        )
    
    # Graphiques comparatifs
    st.subheader("üìà Analyses Comparatives")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique de compl√©tude des donn√©es
        completion_data = {
            'Dimension': list(dimension_details.keys()),
            'Taux de Compl√©tude (%)': [details['completion_rate'] for details in dimension_details.values()]
        }
        
        fig_completion = px.bar(
            completion_data,
            x='Taux de Compl√©tude (%)',
            y='Dimension',
            orientation='h',
            title="Compl√©tude des Donn√©es par Dimension",
            color='Taux de Compl√©tude (%)',
            color_continuous_scale='RdYlGn',
            range_color=[0, 100]
        )
        
        fig_completion.update_layout(
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
            coloraxis_showscale=False
        )
        
        fig_completion.update_traces(
            texttemplate='%{x:.1f}%',
            textposition='inside'
        )
        
        st.plotly_chart(fig_completion, use_container_width=True)
    
    with col2:
        # Graphique de distribution des scores
        fig_dist = px.pie(
            values=list(dimension_scores.values()),
            names=list(dimension_scores.keys()),
            title="Distribution des Scores par Dimension",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        
        fig_dist.update_traces(
            textposition='inside',
            textinfo='percent+label',
            textfont_size=10
        )
        
        fig_dist.update_layout(
            height=400,
            paper_bgcolor='rgba(0,0,0,0)',
            showlegend=False
        )
        
        st.plotly_chart(fig_dist, use_container_width=True)
    
    # Recommandations bas√©es sur les donn√©es
    st.subheader("üí° Recommandations Intelligentes")
    
    # Analyse automatique des points faibles
    weak_dimensions = [dim for dim, score in dimension_scores.items() if score < 50]
    strong_dimensions = [dim for dim, score in dimension_scores.items() if score >= 70]
    
    col1, col2 = st.columns(2)
    
    with col1:
        if weak_dimensions:
            st.markdown("#### üî¥ Dimensions Prioritaires")
            for dim in weak_dimensions:
                score = dimension_scores[dim]
                st.markdown(f"""
                <div style="background: #fff3cd; border-left: 4px solid #ffc107; padding: 1rem; margin-bottom: 0.5rem; border-radius: 5px;">
                    <strong>{dim}</strong> (Score: {score:.1f}/100)<br>
                    <small>N√©cessite une attention imm√©diate et des investissements prioritaires</small>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.success("‚úÖ Aucune dimension critique identifi√©e")
    
    with col2:
        if strong_dimensions:
            st.markdown("#### üü¢ Points Forts")
            for dim in strong_dimensions:
                score = dimension_scores[dim]
                st.markdown(f"""
                <div style="background: #d1edff; border-left: 4px solid #28a745; padding: 1rem; margin-bottom: 0.5rem; border-radius: 5px;">
                    <strong>{dim}</strong> (Score: {score:.1f}/100)<br>
                    <small>Performance satisfaisante, maintenir les efforts</small>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.warning("‚ö†Ô∏è Aucun point fort majeur identifi√©")
    
    # Export des donn√©es
    st.subheader("üì§ Export des Donn√©es")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Export CSV des indicateurs
        all_indicators_data = []
        for category, indicators in indicators_data.items():
            for code, data in indicators.items():
                all_indicators_data.append({
                    'Dimension': category,
                    'Code': code,
                    'Indicateur': data['name'],
                    'Valeur': data['value'],
                    'Unit√©': data['unit'],
                    'Ann√©e': data['year'],
                    'Source': data['source'],
                    'Commentaire': data.get('comment', '')
                })
        
        df_export = pd.DataFrame(all_indicators_data)
        csv_data = df_export.to_csv(index=False)
        
        st.download_button(
            label="üìä Export CSV",
            data=csv_data,
            file_name=f"indicateurs_{city_data['city']}_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv",
            use_container_width=True
        )
    
    with col2:
        # Export JSON des scores
        scores_data = {
            'ville': city_data,
            'scores_dimensions': dimension_scores,
            'details_dimensions': dimension_details,
            'date_export': datetime.now().isoformat()
        }
        
        json_data = json.dumps(scores_data, indent=2, ensure_ascii=False)
        
        st.download_button(
            label="üìã Export JSON",
            data=json_data,
            file_name=f"scores_{city_data['city']}_{datetime.now().strftime('%Y%m%d')}.json",
            mime="application/json",
            use_container_width=True
        )
    
    with col3:
        # R√©g√©n√©ration du rapport PDF
        if st.button("üîÑ R√©g√©n√©rer PDF", use_container_width=True):
            with st.spinner("G√©n√©ration en cours..."):
                pdf_buffer = generate_advanced_pdf_report(
                    city_data, 
                    indicators_data, 
                    diagnostic_info,
                    data.get('documents', [])
                )
                
                st.download_button(
                    label="üì• T√©l√©charger PDF",
                    data=pdf_buffer.getvalue(),
                    file_name=f"diagnostic_urbain_{city_data['city']}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )

def chatbot_tab():
    """Interface de chatbot IA avanc√©"""
    
    st.markdown("### ü§ñ Assistant IA Sp√©cialis√© en Diagnostic Urbain")
    
    # Initialisation de l'historique des conversations
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    # Informations sur les capacit√©s du chatbot
    with st.expander("‚ÑπÔ∏è Capacit√©s de l'Assistant IA"):
        st.markdown("""
        **üß† Intelligence Hybride :**
        - **Analyse locale** : Traitement de vos donn√©es de diagnostic
        - **Recherche documentaire** : RAG sur vos documents upload√©s
        - **Connaissances globales** : Meilleures pratiques internationales
        - **Recommandations** : Suggestions personnalis√©es bas√©es sur vos donn√©es
        
        **üí¨ Types de questions support√©es :**
        - Interpr√©tation des indicateurs et scores
        - Comparaisons avec d'autres villes
        - Recommandations d'am√©lioration
        - M√©thodologies de diagnostic urbain
        - Recherche dans vos documents
        """)
    
    # Zone de chat
    chat_container = st.container()
    
    # Affichage de l'historique des conversations
    with chat_container:
        for i, message in enumerate(st.session_state.chat_history):
            if message['role'] == 'user':
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>üë§ Vous :</strong><br>
                    {message['content']}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message assistant-message">
                    <strong>ü§ñ Assistant :</strong><br>
                    {message['content']}
                </div>
                """, unsafe_allow_html=True)
    
    # Interface de saisie
    st.markdown("---")
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_input = st.text_input(
            "Posez votre question :",
            placeholder="Ex: Comment interpr√©ter le score de la dimension Logement ?",
            key="chat_input"
        )
    
    with col2:
        send_button = st.button("üì§ Envoyer", type="primary", use_container_width=True)
    
    # Suggestions de questions
    st.markdown("**üí° Questions sugg√©r√©es :**")
    
    suggestion_cols = st.columns(3)
    
    suggestions = [
        "Quels sont les points faibles de ma ville ?",
        "Comment am√©liorer le score de logement ?",
        "Comparez avec les standards internationaux",
        "Que disent mes documents sur l'urbanisme ?",
        "Quelles sont les priorit√©s d'investissement ?",
        "Comment interpr√©ter les indicateurs √©conomiques ?"
    ]
    
    for i, suggestion in enumerate(suggestions):
        col_index = i % 3
        with suggestion_cols[col_index]:
            if st.button(suggestion, key=f"suggestion_{i}", use_container_width=True):
                user_input = suggestion
                send_button = True
    
    # Traitement de la question
    if (send_button and user_input) or user_input:
        if user_input.strip():
            # Ajout de la question √† l'historique
            st.session_state.chat_history.append({
                'role': 'user',
                'content': user_input
            })
            
            # Pr√©paration du contexte
            context_data = {}
            documents = []
            
            # R√©cup√©ration des donn√©es du diagnostic si disponibles
            if 'final_report_data' in st.session_state:
                context_data = st.session_state.final_report_data
                documents = context_data.get('documents', [])
            elif 'processed_documents' in st.session_state:
                documents = st.session_state.processed_documents
            
            # G√©n√©ration de la r√©ponse
            with st.spinner("ü§î R√©flexion en cours..."):
                response = generate_advanced_ai_response(
                    user_input, 
                    context_data, 
                    documents
                )
            
            # Ajout de la r√©ponse √† l'historique
            st.session_state.chat_history.append({
                'role': 'assistant',
                'content': response
            })
            
            # Rerun pour afficher la nouvelle conversation
            st.rerun()
    
    # Options avanc√©es
    st.markdown("---")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üóëÔ∏è Effacer l'historique", use_container_width=True):
            st.session_state.chat_history = []
            st.rerun()
    
    with col2:
        if st.session_state.chat_history:
            # Export de la conversation
            chat_export = "\n\n".join([
                f"{'üë§ UTILISATEUR' if msg['role'] == 'user' else 'ü§ñ ASSISTANT'}: {msg['content']}"
                for msg in st.session_state.chat_history
            ])
            
            st.download_button(
                label="üì• Export Chat",
                data=chat_export,
                file_name=f"conversation_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
                mime="text/plain",
                use_container_width=True
            )
    
    with col3:
        # Statistiques de la conversation
        if st.session_state.chat_history:
            total_messages = len(st.session_state.chat_history)
            user_messages = len([msg for msg in st.session_state.chat_history if msg['role'] == 'user'])
            
            st.metric(
                "Messages √©chang√©s",
                f"{total_messages}",
                f"{user_messages} questions"
            )

# Point d'entr√©e principal
if __name__ == "__main__":
    main()
